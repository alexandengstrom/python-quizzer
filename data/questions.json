{
  "beginner": [
    {
      "difficulty": "beginner",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "list1 = [1, 2, 3]\nlist2 = list1\nlist2[0] = 4\nprint(list1)",
      "explanation": "In this code, 'list2' is not a copy of 'list1', but rather a reference to the same list object. Therefore, modifying 'list2' also changes 'list1'. The output will be '[4, 2, 3]'.",
      "correctAnswer": "[4, 2, 3]",
      "incorrectAnswers": [
        "[1, 2, 3]",
        "Error",
        "[1, 4, 3]",
        "None",
        "[4, 4, 4]"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "for i in range(5):\n    x = i\n\nprint(x)",
      "explanation": "The for loop iterates over a range of numbers from 0 to 4. In each iteration, the variable 'x' is assigned the value of 'i'. After the loop completes, 'x' retains the value from the last iteration, which is 4. Therefore, the output of the print statement is '4'.",
      "correctAnswer": "4",
      "incorrectAnswers": ["0", "1", "2", "3", "Error"]
    },
    {
      "difficulty": "beginner",
      "question": "What will be the output of the following code snippet?",
      "codeSnippet": "foo = [1, 2, 3, 4]\nfoo.append(5)\nprint(foo)",
      "explanation": "The 'append' method in Python adds a single element to the end of a list. In this case, '5' is added to the end of the list 'foo', which initially contains [1, 2, 3, 4]. Therefore, the final list printed is [1, 2, 3, 4, 5].",
      "correctAnswer": "[1, 2, 3, 4, 5]",
      "incorrectAnswers": [
        "[1, 2, 3, 4]",
        "[5, 1, 2, 3, 4]",
        "5",
        "Error",
        "None of these"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "Why would this code not work?",
      "codeSnippet": "def greet(name)\n    print(f\"Hello {name}\")\n\ngreet(\"John\")",
      "explanation": "In Python, a function definition must end with a colon ':' to indicate the start of the function's body. In this code snippet, the colon is missing after the function definition 'def greet(name)'. This syntax error prevents the code from working correctly.",
      "correctAnswer": "The colon ':' is missing after the function definition",
      "incorrectAnswers": [
        "The function name 'greet' is a reserved keyword in Python",
        "The print statement is incorrectly formatted",
        "The function does not return anything",
        "The string 'John' is not enclosed in quotes",
        "There is a an misplaced f before the string that is being printed"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What will be the output of the following code snippet?",
      "codeSnippet": "foo = 11\nbar = 2\nfoo_bar = foo // bar\nfoo_bar = foo_bar ** 2\nprint(foo_bar % 3)",
      "explanation": "The code performs several operations: floor division (//), exponentiation (**), and modulo (%). First, 'foo' (11) is divided by 'bar' (2) using floor division, resulting in 5. Then, this result (5) is squared (25). Finally, the modulo operation finds the remainder when 25 is divided by 3, which is 1. Therefore, the output of the code is 1.",
      "correctAnswer": "1",
      "incorrectAnswers": ["0", "2", "4", "5", "6"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = 'Hello world'\nfoo.replace('hello', 'goodbye')\nprint(foo)",
      "explanation": "The string method 'replace' is case-sensitive and does not modify the string in place. Since 'Hello world' does not contain the substring 'hello' (with a lowercase 'h'), the original string remains unchanged. Therefore, 'Hello world' is printed.",
      "correctAnswer": "Hello world",
      "incorrectAnswers": [
        "Goodbye world",
        "goodbye world",
        "hello world",
        "Error",
        "None"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of 'print(x)' in the following Python code snippet?",
      "codeSnippet": "x, y = 1, 2\nx, y = y, x\n\nprint(x)",
      "explanation": "The code snippet swaps the values of 'x' and 'y' using tuple unpacking. Initially, 'x' is 1 and 'y' is 2. After 'x, y = y, x', 'x' becomes 2 and 'y' becomes 1. Therefore, the output of 'print(x)' is 2.",
      "correctAnswer": "2",
      "incorrectAnswers": ["1", "0", "An error occurs", "(1, 2)", "(2, 1)"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following line of Python code:",
      "codeSnippet": "print(\"False\" if False else \"True\")",
      "explanation": "The given code is an example of Python's inline if-else statement, also known as the ternary operator. The expression 'False if False else True' evaluates the condition 'False'. Since the condition is 'False', the expression after the 'else' is returned, which is 'True'. Hence, the output of the code is 'True'.",
      "correctAnswer": "True",
      "incorrectAnswers": ["False", "0", "1", "Syntax Error", "None"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following line of Python code:",
      "codeSnippet": "import random\n\nprint(random.randint(1, 10))",
      "explanation": "The 'random.randint(1, 10)' function generates a random integer between 1 and 10, inclusive of both 1 and 10. Since the output is randomly generated each time the code is executed, it is unpredictable. Therefore, we cannot definitively say what the output will be on any given execution.",
      "correctAnswer": "We dont know",
      "incorrectAnswers": [
        "1",
        "10",
        "0",
        "An error occurs",
        "A number between 1 and 100"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet:",
      "codeSnippet": "foo = [0, 1, 2, 3, 4]\nbar = foo[-1] * foo[1]\nprint(bar)",
      "explanation": "The list 'foo' contains the elements [0, 1, 2, 3, 4]. The expression 'foo[-1]' accesses the last element of the list, which is 4. The expression 'foo[1]' accesses the second element of the list, which is 1. Multiplying these two values (4 * 1) results in 4. Therefore, the output of the code is 4.",
      "correctAnswer": "4",
      "incorrectAnswers": ["0", "1", "2", "3", "Error"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the outcome when the following Python code snippet is executed:",
      "codeSnippet": "foo = 5\n\nif (foo > 4) {\n    print(\"Over 4\")\n} else if (foo < 4) {\n    print(\"Under 4\")\n} else {\n    print(\"Exactly 4\")\n}",
      "explanation": "The code snippet contains syntax errors typical of someone transitioning from a language like JavaScript or C to Python. In Python, curly braces are not used to denote code blocks; instead, indentation is used. Additionally, 'else if' should be written as 'elif'. Therefore, the code will not run and will result in a 'SyntaxError'.",
      "correctAnswer": "SyntaxError",
      "incorrectAnswers": [
        "\"Over 4\"",
        "\"Under 4\"",
        "\"Exactly 4\"",
        "Nothing is printed",
        "Runtime Error"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What will be the last number printed by the following Python code snippet?",
      "codeSnippet": "foo = 10\n\nwhile foo >= 0:\n    print(foo)\n    foo = foo / 2 - 1",
      "explanation": "In the code, 'foo' starts at 10 and is continuously halved and reduced by 1 in each iteration of the while loop. The loop continues as long as 'foo' is greater than or equal to 0. The value of 'foo' becomes 1.0 in the last iteration before it becomes negative, making 1.0 the last number to be printed.",
      "correctAnswer": "1.0",
      "incorrectAnswers": ["0", "0.5", "2", "2.5", "4"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet:",
      "codeSnippet": "foo = 1 + 2 % 3 * 4 - 5\nprint(foo)",
      "explanation": "In the expression '1 + 2 % 3 * 4 - 5', the modulus operator (%) and multiplication (*) are executed before addition (+) and subtraction (-) due to operator precedence. The expression simplifies as follows: 2 % 3 equals 2 (since 2 divided by 3 leaves a remainder of 2), then 2 * 4 equals 8, and the expression becomes 1 + 8 - 5. This simplifies to 9 - 5, which equals 4. Therefore, the output of the code is 4.",
      "correctAnswer": "4",
      "incorrectAnswers": ["2", "0", "-2", "3", "-1"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet:",
      "codeSnippet": "prices = {\"apple\": 1, \"banana\": 2, \"orange\": 3}\npear_price = prices.get(\"pear\", 4)\nprint(pear_price)",
      "explanation": "The code snippet uses the '.get()' method on a dictionary to retrieve the value associated with the key 'pear'. Since 'pear' is not present in the 'prices' dictionary, the method returns the default value provided, which is 4. Hence, the output of the code is 4.",
      "correctAnswer": "4",
      "incorrectAnswers": ["\"pear\"", "None", "2", "3", "KeyError"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "import math\n\nfoo = 3 - 1 * 4\n\nprint(int(math.fabs(foo)))",
      "explanation": "The code first evaluates the expression '3 - 1 * 4'. According to Python's operator precedence rules, multiplication is performed before subtraction, so '1 * 4' equals 4, and then '3 - 4' results in -1. The 'math.fabs' function computes the absolute value of -1, which is 1.0. The 'int' function then converts this floating-point number to an integer, 1. Therefore, the output of the code is 1.",
      "correctAnswer": "1",
      "incorrectAnswers": ["3", "4", "2", "SyntaxError", "TypeError"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(\"hello\", sep=\" \", end=\"world\")",
      "explanation": "The 'print' function in Python outputs the provided arguments to the console. The 'sep' parameter specifies the separator to use between multiple values, and the 'end' parameter specifies what to print at the end of the output. In this code, 'sep=\" \"' indicates a space as the separator, but since there is only one value ('hello'), the separator is not used. The 'end=\"world\"' parameter appends 'world' to the end of the output, resulting in the combined output 'helloworld' without a space in between. This question tests understanding of the 'print' function and its parameters in Python.",
      "correctAnswer": "helloworld",
      "incorrectAnswers": [
        "hello world",
        "hello worldworld",
        "SyntaxError",
        "hello",
        "world"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the last printed value in the output of the following Python code snippet?",
      "codeSnippet": "for every item in range(10):\n    if item == 0:\n        print(item)\n        break",
      "explanation": "The code snippet contains a syntax error in the 'for' loop statement. The correct syntax for a 'for' loop in Python is 'for variable in iterable:', where 'variable' is the name of the variable that will take on the value of each element in the 'iterable' as the loop runs. In this case, 'every item' is used instead of a single variable name, causing a syntax error. Therefore, the last printed value is a 'SyntaxError', as the code will not execute successfully. This question tests understanding of the syntax for 'for' loops in Python.",
      "correctAnswer": "SyntaxError",
      "incorrectAnswers": ["0", "1", "9", "Nothing is printed", "10"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the value of 'foo' after executing the following Python code snippet?",
      "codeSnippet": "foo = 15\nbar = 10\nfoo = foo - bar\nbar = bar - foo\nfoo, bar = bar, foo\n\nprint(foo)",
      "explanation": "Initially, 'foo' is set to 15 and 'bar' to 10. The line 'foo = foo - bar' updates 'foo' to 5 (since 15 - 10 = 5). Next, 'bar = bar - foo' updates 'bar' to 5 (10 - 5 = 5). The line 'foo, bar = bar, foo' swaps the values of 'foo' and 'bar', but since both are 5 at this point, their values remain the same. Therefore, when 'print(foo)' is executed, the output is 5. This question tests understanding of basic arithmetic operations, variable assignments, and value swapping in Python.",
      "correctAnswer": "5",
      "incorrectAnswers": ["0", "10", "15", "20", "-5"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "num_list = [1, 2, 3, 4, 5]\nsum = 0\n\nfor i in range(len(num_list)):\n    sum += i\n\nprint(sum)",
      "explanation": "The code calculates the sum of the indices of the list 'num_list', not the elements themselves. The range function generates indices from 0 to 4 (length of the list minus one). These indices (0, 1, 2, 3, 4) are added together, resulting in a total of 10. Therefore, the output of the print statement is '10'.",
      "correctAnswer": "10",
      "incorrectAnswers": ["15", "20", "0", "5", "None of these"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "def foo(x, y):\n    return x * y\n\nresult = foo(2, \"Python\")\nprint(result)",
      "explanation": "In Python, when a string is multiplied by an integer, the string is repeated that many times. In this code snippet, 'foo' takes two arguments, 'x' and 'y', and returns the product 'x * y'. Since 'x' is 2 and 'y' is the string \"Python\", the result is the string \"Python\" repeated twice, forming \"PythonPython\". Therefore, the output of the print statement is \"PythonPython\".",
      "correctAnswer": "PythonPython",
      "incorrectAnswers": [
        "4",
        "TypeError",
        "SyntaxError",
        "10",
        "None of these"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "a = 5\nb = 10\n\ndef swap(a, b):\n    temp = a\n    a = b\n    b = temp\n\nswap(a, b)\nprint(\"a:\", a, \"b:\", b)",
      "explanation": "In this code snippet, the function 'swap' is supposed to exchange the values of 'a' and 'b'. However, it only swaps the values locally within the function's scope. The original variables 'a' and 'b' outside the function remain unchanged. Thus, after calling 'swap(a, b)', the values of 'a' and 'b' are still 5 and 10, respectively. Therefore, the output of the print statement is 'a: 5 b: 10'.",
      "correctAnswer": "a: 5 b: 10",
      "incorrectAnswers": [
        "a: 10 b: 5",
        "SyntaxError",
        "TypeError",
        "a: 0 b: 0",
        "None of these"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = 10\nbar = 11\n\nif foo <= 11 <= bar:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "explanation": "The if statement checks if 11 is greater than or equal to 'foo' and less than or equal to 'bar'. Since 'foo' is 10 and 'bar' is 11, the condition 'foo <= 11 <= bar' is True. Therefore, 'Yes' is printed. The other options are incorrect because there is no syntax error, type error, or other value being printed, and the condition of the if statement is met.",
      "correctAnswer": "Yes",
      "incorrectAnswers": [
        "No",
        "SyntaxError",
        "11",
        "Nothing is printed",
        "TypeError"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What does the following Python code snippet do?",
      "codeSnippet": "from datetime import datetime\n\nprint(datetime.now())",
      "explanation": "The code snippet uses the 'datetime.now()' method from Python's 'datetime' module to get the current local date and time at the moment the code is executed. The 'print' statement then outputs this information. Therefore, the code snippet prints the current date and time each time it is run.",
      "correctAnswer": "Prints the current date and time",
      "incorrectAnswers": [
        "Prints a random date and time",
        "Prints the date and time when the script was written",
        "SyntaxError",
        "ModuleNotFoundError",
        "AssertionError"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "name = \"Alice\"\nage = 30\noutput = f\"{age} is {name} years old.\"\nprint(output)",
      "explanation": "The code snippet uses an f-string for string formatting, where variables 'age' and 'name' are directly embedded in the string. The f-string 'f\"{age} is {name} years old.\"' replaces '{age}' with the value of the variable 'age' (which is 30) and '{name}' with the value of the variable 'name' (which is 'Alice'). Therefore, the output of the print statement is \"30 is Alice years old.\".",
      "correctAnswer": "\"30 is Alice years old.\"",
      "incorrectAnswers": [
        "\"Alice is 30 years old.\"",
        "\"age is name years old.\"",
        "SyntaxError",
        "\"{age} is {name} years old.\"",
        "TypeError"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(print(\"Hello World\", end=\"\"))",
      "explanation": "The inner print function prints 'Hello World' and returns 'None' because every print function in Python returns 'None' by default. Since the 'end' argument is an empty string, there is no newline after 'Hello World'. The outer print function then prints the return value of the inner print, which is 'None'. Therefore, the output of the code is 'Hello WorldNone'.",
      "correctAnswer": "Hello WorldNone",
      "incorrectAnswers": [
        "Hello World",
        "None",
        "Hello WorldHello World",
        "SyntaxError",
        "TypeError"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = 0\n\nwhile foo < 10:\n    foo += 3\n\nprint(foo)",
      "explanation": "In this code, the variable 'foo' is initialized to 0 and incremented by 3 in each iteration of the while loop until 'foo' is no longer less than 10. The loop executes when 'foo' is 0, 3, 6, and 9. After 'foo' becomes 9, the loop executes one more time, incrementing 'foo' to 12. Since 12 is not less than 10, the loop terminates and the value 12 is printed. Therefore, the output of the code is '12'.",
      "correctAnswer": "12",
      "incorrectAnswers": ["9", "10", "11", "SyntaxError", "Infinite Loop"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following code snippet:",
      "codeSnippet": "foo = 2 > 1\nbar = 1 > 2\n\nwhile foo:\n    continue\n\nprint(foo + bar)",
      "explanation": "The code creates two variables, 'foo' and 'bar'. 'foo' is set to True since 2 is greater than 1, and 'bar' is set to False since 1 is not greater than 2. The while loop continuously loops because 'foo' is True and the loop contains only a 'continue' statement, which does nothing but keeps the loop running indefinitely. As a result, the code results in an infinite loop and the print statement is never executed.",
      "correctAnswer": "Infinite Loop",
      "incorrectAnswers": ["True", "False", "1", "TypeError", "SyntaxError"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = \"hello\"\nbar = \"world\"\nprint(foo + bar)",
      "explanation": "The code defines two string variables, 'foo' and 'bar', containing 'hello' and 'world', respectively. The print statement concatenates these two strings using the '+' operator without any space between them. Therefore, the output of the code is the combined string 'helloworld'.",
      "correctAnswer": "helloworld",
      "incorrectAnswers": [
        "hello world",
        "HelloWorld",
        "hello-world",
        "SyntaxError",
        "TypeError"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = \"hello\"\nbar = \"world\"\nprint(foo * bar)",
      "explanation": "In Python, the '*' operator can be used to repeat a string a specified number of times. However, in this code, the '*' operator is used between two string variables ('foo' and 'bar'), which is not a valid operation and will result in a TypeError. Python does not support multiplication between two strings, and thus, executing this code will raise a TypeError.",
      "correctAnswer": "TypeError",
      "incorrectAnswers": [
        "helloworld",
        "hello world",
        "hellohellohello...",
        "0",
        "SyntaxError"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = \"hello\"\nbar = \"world\"\nprint(foo * 2 + bar)",
      "explanation": "In this code, the '*' operator is used to repeat the string stored in 'foo' twice. Therefore, 'foo * 2' results in 'hellohello'. This repeated string is then concatenated with the string stored in 'bar', which is 'world', using the '+' operator. As a result, the output of the print statement is 'hellohelloworld'.",
      "correctAnswer": "hellohelloworld",
      "incorrectAnswers": [
        "helloworld",
        "hellohello world",
        "hellohello",
        "SyntaxError",
        "TypeError"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(min(-2, -1, 0, 1, 2))",
      "explanation": "The `min` function in Python returns the smallest of the input values. When called with the values -2, -1, 0, 1, and 2, the smallest value among these is -2. Therefore, the output of the code is '-2'. This function is commonly used to find the minimum value in a collection of numbers.",
      "correctAnswer": "-2",
      "incorrectAnswers": ["-1", "0", "1", "2", "TypeError"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(max(-255, -1, 0, 1, 2))",
      "explanation": "The `max` function in Python returns the largest of the input values. When called with the values -255, -1, 0, 1, and 2, the largest value among these is 2. Therefore, the output of the code is '2'. This function is commonly used to find the maximum value in a collection of numbers.",
      "correctAnswer": "2",
      "incorrectAnswers": ["-255", "-1", "0", "1", "TypeError"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(sum([1, 2, 3]))",
      "explanation": "The `sum` function in Python calculates the total of all the numbers in an iterable. In this case, the function is called with a list containing the numbers 1, 2, and 3. The sum of these numbers is 1 + 2 + 3, which equals 6. Therefore, the output of the code is '6'. This function is commonly used for adding up numbers in a list or any other iterable.",
      "correctAnswer": "6",
      "incorrectAnswers": ["1", "2", "3", "TypeError", "SyntaxError"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(pow(2, -1))",
      "explanation": "The `pow` function in Python calculates the power of a number, with the first argument being the base and the second argument being the exponent. In this case, `pow(2, -1)` calculates 2 raised to the power of -1. The result of raising a number to a negative exponent is the reciprocal of that number raised to the absolute value of the exponent, which in this case is 1/2 or 0.5. Therefore, the output of the code is '0.5'.",
      "correctAnswer": "0.5",
      "incorrectAnswers": ["2", "-1", "0", "TypeError", "SyntaxError"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(type(3.14))",
      "explanation": "The `type` function in Python returns the type of an object. In this case, `3.14` is a floating-point number, so `type(3.14)` returns `<class 'float'>`. The output of the code is therefore '<class 'float'>'. Understanding data types and how to check them with the `type` function is a fundamental aspect of Python programming.",
      "correctAnswer": "<class 'float'>",
      "incorrectAnswers": [
        "<class 'int'>",
        "<class 'str'>",
        "<class 'bool'>",
        "SyntaxError",
        "TypeError"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = 'john doe'\nprint(foo.title())",
      "explanation": "The `title` method in Python converts the first character of each word in a string to uppercase and the remaining characters to lowercase. In this case, `foo.title()` converts the string 'john doe' to 'John Doe', with the first letters of both 'john' and 'doe' capitalized. Therefore, the output of the code is 'John Doe'. This method is commonly used for formatting names or titles in a standardized way.",
      "correctAnswer": "John Doe",
      "incorrectAnswers": [
        "john doe",
        "John doe",
        "JOHN DOE",
        "jOHn dOE",
        "TypeError"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = 'john doe'\nprint(foo.capitalize())",
      "explanation": "The `capitalize` method in Python converts the first character of a string to uppercase and the rest of the characters to lowercase. In this case, `foo.capitalize()` converts the string 'john doe' to 'John doe', with only the first letter 'j' of 'john' capitalized, and the rest of the string remaining in lowercase. Therefore, the output of the code is 'John doe'. This method is often used for ensuring that a string conforms to a format where only the first character is capitalized.",
      "correctAnswer": "John doe",
      "incorrectAnswers": [
        "john doe",
        "John Doe",
        "JOHN DOE",
        "jOHn dOE",
        "TypeError"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "foo = [1, 2, 3]\n\nfoo.extend([3])\nprint(foo)",
      "explanation": "The 'extend' method in Python adds all elements of an iterable (in this case, the list [3]) to the end of the list. Since 'foo' initially contains [1, 2, 3], after extending it with [3], the list becomes [1, 2, 3, 3]. Therefore, the output of the print statement is '[1, 2, 3, 3]'.",
      "correctAnswer": "[1, 2, 3, 3]",
      "incorrectAnswers": [
        "[1, 2, 3]",
        "[3, 1, 2, 3]",
        "Error",
        "None",
        "[1, 2, 3, [3]]"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "foo = [1, 2, 3]\n\nprint(foo.index(2))",
      "explanation": "The 'index' method in Python returns the first index of the specified value in a list. In this case, 'foo.index(2)' will return the index of the value '2' in the list 'foo', which is '[1, 2, 3]'. The value '2' is at index 1 in the list (as Python lists are zero-indexed), so the output of the print statement will be '1'.",
      "correctAnswer": "1",
      "incorrectAnswers": ["2", "0", "KeyError", "None", "3"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "foo = [1, 2, 3]\n\nprint(foo.pop())",
      "explanation": "The 'pop' method in Python removes and returns the last item from a list. If no index is specified, the default is -1, which refers to the last item. In this code, 'foo.pop()' removes and returns '3', the last item in the list 'foo', which is '[1, 2, 3]'. Therefore, the output of the print statement will be '3'.",
      "correctAnswer": "3",
      "incorrectAnswers": ["1", "2", "[1, 2]", "[2, 3]", "Error"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "foo = [1, 2, 3]\n\nfoo.append([1, 2, 3])\nprint(foo)",
      "explanation": "The 'append' method in Python adds its argument as a single element to the end of a list. In this case, 'foo.append([1, 2, 3])' adds the list '[1, 2, 3]' as a single element to the list 'foo', which initially contains [1, 2, 3]. As a result, the new list becomes '[1, 2, 3, [1, 2, 3]]'. Therefore, the output of the print statement is '[1, 2, 3, [1, 2, 3]]'.",
      "correctAnswer": "[1, 2, 3, [1, 2, 3]]",
      "incorrectAnswers": [
        "[1, 2, 3, 1, 2, 3]",
        "[[1, 2, 3], [1, 2, 3]]",
        "1",
        "[1, 2, 3, 1, 2]",
        "Error"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "foo = [1, 2, 3]\n\nprint(\"1\" in foo)",
      "explanation": "The 'in' operator in Python checks if the specified item is present in the iterable. In this case, it checks if the string '1' is in the list 'foo', which contains integers [1, 2, 3]. Since '1' is a string and the elements in 'foo' are integers, the string '1' is not in the list. Therefore, the output of the print statement is 'False'.",
      "correctAnswer": "False",
      "incorrectAnswers": ["True", "Error", "None", "0", "1"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "foo = [1, 2, 3]\n\nprint(foo.count(4))",
      "explanation": "The 'count' method in Python returns the number of times a specified value appears in a list. In this code, 'foo.count(4)' checks for the occurrence of the integer '4' in the list 'foo', which is '[1, 2, 3]'. Since '4' is not present in the list, the count is '0'. Therefore, the output of the print statement will be '0'.",
      "correctAnswer": "0",
      "incorrectAnswers": ["1", "4", "Error", "None", "3"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "foo = [1, 2, 3]\n\nprint(set(foo + foo))",
      "explanation": "In this code, 'foo + foo' concatenates the list 'foo' with itself, resulting in '[1, 2, 3, 1, 2, 3]'. The 'set()' function then converts this list into a set, which removes any duplicate elements. Sets in Python are unordered collections of unique elements. Therefore, the resulting set will contain each element from 'foo' only once, regardless of how many times they appear in the list. The output will be a set containing the elements {1, 2, 3}.",
      "correctAnswer": "{1, 2, 3}",
      "incorrectAnswers": [
        "[1, 2, 3, 1, 2, 3]",
        "[1, 2, 3]",
        "Error",
        "None",
        "{1, 1, 2, 2, 3, 3}"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "foo = [1, 2, 3]\n\nprint(foo.clear())",
      "explanation": "The 'clear' method in Python removes all items from a list. This method does not return any value; it performs the action of clearing the list in-place. Therefore, when 'foo.clear()' is called, the list 'foo' becomes empty, but the method itself returns 'None'. As a result, the output of the print statement will be 'None'.",
      "correctAnswer": "None",
      "incorrectAnswers": ["[]", "[1, 2, 3]", "Error", "0", "True"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "foo = \"hello world\"\n\nprint(foo.endswith(\"d\"))",
      "explanation": "The 'endswith' method in Python is used to check if a string ends with the specified suffix. In this case, 'foo.endswith(\"d\")' checks whether the string stored in 'foo', which is 'hello world', ends with the character 'd'. Since 'hello world' does indeed end with 'd', the method returns 'True'. Therefore, the output of the print statement will be 'True'.",
      "correctAnswer": "True",
      "incorrectAnswers": ["False", "Error", "None", "\"d\"", "\"world\""]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "foo = \"hello world\"\n\nprint(foo.istitle())",
      "explanation": "The 'istitle' method in Python checks if a string is titled, meaning that the first character of each word is uppercase and all other characters are lowercase. In this case, 'foo.istitle()' checks if the string 'hello world' is a title-cased string. Since neither 'hello' nor 'world' start with an uppercase letter, the method returns 'False'. Therefore, the output of the print statement will be 'False'.",
      "correctAnswer": "False",
      "incorrectAnswers": [
        "True",
        "Error",
        "None",
        "\"hello world\"",
        "\"Hello World\""
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "foo = \"hello world\"\n\nprint(foo.lower().upper())",
      "explanation": "In this code, two string methods are chained together. The 'lower' method converts all characters in the string 'foo' to lowercase, and the 'upper' method then converts these characters to uppercase. Since the string 'foo' is already in lowercase ('hello world'), the 'lower' method makes no changes, and the 'upper' method subsequently converts all characters to uppercase. Therefore, the output of the print statement will be 'HELLO WORLD'.",
      "correctAnswer": "HELLO WORLD",
      "incorrectAnswers": [
        "hello world",
        "Hello World",
        "HELLO world",
        "Error",
        "hELLO wORLD"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "foo = \"hello world\"\n\nprint(foo.split(\"w\"))",
      "explanation": "The 'split' method in Python splits a string into a list, separating the string at each occurrence of the specified delimiter. In this case, 'foo.split(\"w\")' splits the string 'hello world' at the letter 'w'. Since 'w' is present only once in 'hello world', the string is split into two parts, ['hello ', 'orld']. Therefore, the output of the print statement will be '['hello ', 'orld']'.",
      "correctAnswer": "['hello ', 'orld']",
      "incorrectAnswers": [
        "['hello', 'world']",
        "['h', 'ello world']",
        "Error",
        "None",
        "['hello w', 'orld']"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "foo = \"hello world\"\n\nprint(foo[0] + foo[4])",
      "explanation": "In this code, 'foo[0]' and 'foo[4]' refer to the characters at index 0 and index 4 of the string 'foo', which is 'hello world'. In Python, string indexing starts at 0, so 'foo[0]' is 'h', and 'foo[4]' is 'o'. Concatenating these two characters results in the string 'ho'. Therefore, the output of the print statement will be 'ho'.",
      "correctAnswer": "ho",
      "incorrectAnswers": ["hello", "world", "hw", "Error", "ol"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following code?",
      "codeSnippet": "x = 5\ny = 3\nprint(x + y)",
      "explanation": "The code performs a simple addition operation with two integers, 5 and 3. When added together, the result is 8.",
      "correctAnswer": "8",
      "incorrectAnswers": ["15", "2", "53", "TypeError", "8.0"]
    },
    {
      "difficulty": "beginner",
      "question": "Which data type is used to store the value 'Hello World'?",
      "codeSnippet": "greeting = 'Hello World'\nprint(type(greeting))",
      "explanation": "The variable 'greeting' stores a string value 'Hello World'. The 'type' function in Python is used to determine the data type of a variable, which in this case is 'str' (string).",
      "correctAnswer": "<class 'str'>",
      "incorrectAnswers": [
        "<class 'int'>",
        "<class 'list'>",
        "<class 'bool'>",
        "SyntaxError",
        "<class 'float'>"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What will be the output of the following code?",
      "codeSnippet": "list_numbers = [1, 2, 3, 4, 5]\nprint(list_numbers[2])",
      "explanation": "The code accesses the third element (index 2) of the list 'list_numbers', which contains the numbers 1, 2, 3, 4, 5. Indexing in Python starts from 0, so the third element is 3.",
      "correctAnswer": "3",
      "incorrectAnswers": ["2", "4", "5", "IndexError", "1"]
    },
    {
      "difficulty": "beginner",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "foo = 5\nbar = 3\nprint(foo // bar)",
      "explanation": "The '//' operator in Python performs floor division. When 'foo' (5) is divided by 'bar' (3) using floor division, the result is the largest integer less than or equal to the division result, which is 1.",
      "correctAnswer": "1",
      "incorrectAnswers": ["1.67", "2", "0", "TypeError", "5"]
    },
    {
      "difficulty": "beginner",
      "question": "What does the following Python code print?",
      "codeSnippet": "print(10 == 10.0)",
      "explanation": "In Python, the '==' operator checks for value equality. It compares the values of 10 (integer) and 10.0 (float) and finds them to be equal, thus returning True.",
      "correctAnswer": "True",
      "incorrectAnswers": ["False", "TypeError", "10", "10.0", "None"]
    },
    {
      "difficulty": "beginner",
      "question": "What will be the output of the following code?",
      "codeSnippet": "foo = 'Hello'\nbar = 'World'\nprint(foo + ' ' + bar)",
      "explanation": "The '+' operator in Python concatenates strings. This code concatenates 'Hello', a space, and 'World', resulting in the string 'Hello World'.",
      "correctAnswer": "Hello World",
      "incorrectAnswers": [
        "HelloWorld",
        "hello world",
        "TypeError",
        "SyntaxError",
        "None"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What is the result of the following Python expression?",
      "codeSnippet": "print(len('Python'))",
      "explanation": "The 'len' function in Python returns the length of a string. The string 'Python' has 6 characters.",
      "correctAnswer": "6",
      "incorrectAnswers": ["7", "5", "TypeError", "'Python'", "None"]
    },
    {
      "difficulty": "beginner",
      "question": "What is the output of the following code snippet?",
      "codeSnippet": "foo = [10, 20, 30]\nprint(foo[1])",
      "explanation": "Python lists are zero-indexed. 'foo[1]' accesses the second element in the list 'foo', which is 20.",
      "correctAnswer": "20",
      "incorrectAnswers": ["10", "30", "IndexError", "TypeError", "None"]
    },
    {
      "difficulty": "beginner",
      "question": "What will the following Python code output?",
      "codeSnippet": "foo = True\nbar = False\nprint(foo and bar)",
      "explanation": "The 'and' logical operator in Python returns True if both operands are true. Since 'foo' is True and 'bar' is False, the result is False.",
      "correctAnswer": "False",
      "incorrectAnswers": [
        "True",
        "TrueFalse",
        "SyntaxError",
        "foo",
        "True False"
      ]
    },
    {
      "difficulty": "beginner",
      "question": "What does the following Python code print?",
      "codeSnippet": "foo = 10\nprint(foo > 5 and foo < 15)",
      "explanation": "The code checks if 'foo' is greater than 5 and less than 15. Since 'foo' is 10, both conditions are True, so the result is True.",
      "correctAnswer": "True",
      "incorrectAnswers": ["False", "TypeError", "SyntaxError", "10", "None"]
    },
    {
      "difficulty": "beginner",
      "question": "What will be the output of the following code?",
      "codeSnippet": "print(15 % 4)",
      "explanation": "The '%' operator in Python calculates the remainder of the division. The remainder of 15 divided by 4 is 3.",
      "correctAnswer": "3",
      "incorrectAnswers": ["4", "0", "12", "TypeError", "1"]
    },
    {
      "difficulty": "beginner",
      "question": "What does the following Python code print?",
      "codeSnippet": "foo = [1, 2, 3]\nprint(2 in foo)",
      "explanation": "The 'in' operator in Python checks if a value exists in a list. Since 2 is an element of the list 'foo', the output is True.",
      "correctAnswer": "True",
      "incorrectAnswers": ["False", "Error", "None", "0", "1"]
    }
  ],
  "medium": [
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "list = []\nfor i in range(1, 5):\n    list.append(i ** i if i % 2 else 2)\n\nprint(list)",
      "explanation": "The code uses a for loop to iterate over numbers 1 to 4. For each number 'i', it appends 'i ** i' to the list if 'i' is odd (i % 2 evaluates to True), otherwise, it appends 2. The final list is [1, 2, 27, 2], where 1 and 27 are the results of 1^1 and 3^3, respectively, and 2 is appended for even numbers 2 and 4.",
      "correctAnswer": "[1, 2, 27, 2]",
      "incorrectAnswers": [
        "[1, 2, 9, 2]",
        "[1, 4, 27, 16]",
        "[2, 2, 2, 2]",
        "Error",
        "[1, 4, 9, 16]"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What will be the output of the following code that uses a tuple?",
      "codeSnippet": "data = (10, 20, 30, 40, 50)\nprint(data[1:-1])",
      "explanation": "The slicing operation 'data[1:-1]' takes elements from index 1 to one before the last index (-1) of the tuple 'data'. This results in the tuple (20, 30, 40).",
      "correctAnswer": "(20, 30, 40)",
      "incorrectAnswers": [
        "(10, 20, 30, 40)",
        "(20, 30)",
        "(30, 40, 50)",
        "(10, 20, 30)",
        "TypeError"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of this code involving a while loop?",
      "codeSnippet": "count = 0\nwhile count < 5:\n    if count == 2:\n        break\n    count += 1\nprint(count)",
      "explanation": "The while loop increments 'count' until it reaches 2. When 'count' equals 2, the 'break' statement is executed, which exits the loop. Therefore, the value of 'count' printed is 2.",
      "correctAnswer": "2",
      "incorrectAnswers": ["1", "3", "4", "5", "0"]
    },

    {
      "difficulty": "medium",
      "question": "What is the result of the following dictionary operation?",
      "codeSnippet": "info = {'name': 'Alice', 'age': 30, 'city': 'New York'}\ndel info['city']\nprint('city' in info)",
      "explanation": "The code deletes the key 'city' from the dictionary 'info'. The 'in' operator then checks if 'city' is a key in 'info', which it is not after the deletion.",
      "correctAnswer": "False",
      "incorrectAnswers": ["True", "KeyError", "None", "'New York'", "30"]
    },

    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = \"Python is awesome!\"\nbar = foo[7:9] + foo[-1] + foo[:6]\nprint(bar)",
      "explanation": "The code snippet utilizes string slicing to rearrange segments of the string stored in 'foo'. The slice 'foo[7:9]' extracts the substring 'is', 'foo[-1]' gets the last character '!', and 'foo[:6]' extracts the first six characters 'Python'. Concatenating these parts in the given order forms 'is!Python', which is the output of the print statement.",
      "correctAnswer": "is!Python",
      "incorrectAnswers": [
        "awesome!Python",
        "Pythonis!",
        "isPython!",
        "Python!is",
        "SyntaxError"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "data = [1, 2, 3, 4, 5, 6]\ndata = [i % 3 == 0 for i in data]\nprint(data[3])",
      "explanation": "The list comprehension '[i % 3 == 0 for i in data]' transforms 'data' into a list of boolean values, each indicating whether the corresponding element in the original 'data' list is divisible by 3. The transformed list is '[False, False, True, False, False, True]'. Accessing the element at index 3 (which is the fourth element due to zero-based indexing) returns 'False'.",
      "correctAnswer": "False",
      "incorrectAnswers": ["True", "3", "4", "IndexError", "None"]
    },
    {
      "difficulty": "medium",
      "question": "What will be the last number printed by the following code snippet?",
      "codeSnippet": "for i in range(0, 9, 3):\n    print(i)",
      "explanation": "The range function in the loop is defined as range(start, stop, step). Here, it starts from 0 and goes up to but does not include 9, in steps of 3. The numbers printed are 0, 3, and 6. Therefore, the last number printed is 6.",
      "correctAnswer": "None of these",
      "incorrectAnswers": ["3", "1", "9", "12", "0"]
    },
    {
      "difficulty": "medium",
      "question": "What will be the output of the following code snippet?",
      "codeSnippet": "foo = ['a', 'b', 'c']\nbar = [1, 2, 3]\nfoo_bar = dict(zip(bar, foo))\nprint(foo_bar['a'])",
      "explanation": "The zip function combines elements of the lists 'bar' and 'foo' into pairs, which are then used to create a dictionary with 'bar' elements as keys and 'foo' elements as values. The resulting dictionary is {'1': 'a', '2': 'b', '3': 'c'}. However, when trying to access foo_bar['a'], it results in a KeyError because 'a' is not a key in this dictionary; the keys are integers from the 'bar' list.",
      "correctAnswer": "KeyError",
      "incorrectAnswers": ["'1'", "1", "None", "'a'", "TypeError"]
    },
    {
      "difficulty": "medium",
      "question": "What numbers will be printed from the following code snippet?",
      "codeSnippet": "def foo(num):\n    return not num % 2\n\nfor i in range(7):\n    if not foo(i):\n        break\n    print(i)",
      "explanation": "The function 'foo' returns 'True' if the passed number is even (including zero) and 'False' if it is odd. The for loop iterates from 0 to 6. When 'i' is 0, 'foo(i)' returns 'True', so the print statement executes. However, when 'i' becomes 1, 'foo(i)' returns 'False', triggering the break statement. Therefore, only '0' is printed before the loop terminates.",
      "correctAnswer": "0",
      "incorrectAnswers": [
        "0, 1, 2, 3, 4, 5, 6",
        "0, 2, 4, 6",
        "1, 3, 5",
        "No numbers will be printed",
        "2, 4, 6"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = 'hello world'\nbar = '.'.join(reversed(foo.title().split()))\n\nprint(bar)",
      "explanation": "The code first converts 'foo' to title case ('Hello World'), then splits it into a list ['Hello', 'World']. 'reversed' creates an iterator that reads the list in reverse order. Finally, 'join' combines the elements with a period ('.'). So, the output is 'World.Hello'.",
      "correctAnswer": "World.Hello",
      "incorrectAnswers": [
        "dLroW.olleH",
        "Hello World",
        "hello world",
        "dlroW.olleH",
        "world hello"
      ]
    },
    {
      "difficulty": "medium",
      "question": "Which index will be printed as a result of the given Python code snippet?",
      "codeSnippet": "def foo(x):\n    x[2] = 100\n    y = tuple(x)\n    return y\n\nx = [1, 2, 3, 4, 5]\ny = foo(x)\n\nfor i in range(len(x)):\n    if x[i] != y[i]:\n        print(i)\n        break",
      "explanation": "The function 'foo' modifies the third element of the list 'x' to 100 and then converts the modified list into a tuple 'y'. Since lists are mutable, the change in 'x[2]' is reflected outside the function. Both 'x' and 'y' have the same elements after modification. Therefore, no index will be printed as there is no difference between the elements of 'x' and 'y'.",
      "correctAnswer": "No index will be printed",
      "incorrectAnswers": ["0", "1", "2", "3", "4"]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the given Python code snippet?",
      "codeSnippet": "foo = 'Hello World'\nbar = foo[::-1]\nprint(bar)",
      "explanation": "The code uses string slicing to reverse the string 'Hello World'. The slice '[::-1]' means to start at the end of the string and end at position 0, moving backward one step at a time. Thus, it prints 'dlroW olleH'.",
      "correctAnswer": "dlroW olleH",
      "incorrectAnswers": [
        "Hello World",
        "World Hello",
        "d l r o W   o l l e H",
        "H e l l o   W o r l d",
        "Error"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the Python code snippet involving list slicing and insertion?",
      "codeSnippet": "foo = [1, 2, 3, 4, 5]\nfoo[3:3] = [100, 200]\n\nprint(foo)",
      "explanation": "The code uses list slicing to insert elements at a specific position. 'foo[3:3] = [100, 200]' inserts the elements 100 and 200 at index 3, without removing any elements. The resulting list is '[1, 2, 3, 100, 200, 4, 5]'.",
      "correctAnswer": "[1, 2, 3, 100, 200, 4, 5]",
      "incorrectAnswers": [
        "[1, 2, 3, [100, 200], 4, 5]",
        "[1, 2, 3, 4, 5, 100, 200]",
        "[100, 200, 1, 2, 3, 4, 5]",
        "[1, 2, 3, 100, 200]",
        "An error occurs"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What will the variable 'bar' contain after executing the given Python code snippet?",
      "codeSnippet": "foo = ['apple', 'banana', 'cherry']\nbar = {i: len(i) for i in foo}",
      "explanation": "The code uses a dictionary comprehension to create 'bar'. Each element in 'foo' is used as a key, and its length (found using the 'len' function) is the corresponding value. Thus, 'bar' is a dictionary with words from 'foo' as keys and their lengths as values.",
      "correctAnswer": "A dictionary with words from 'foo' as keys and their lengths as values",
      "incorrectAnswers": [
        "A list of the lengths of each word in 'foo'",
        "A tuple with words from 'foo' and their lengths",
        "A set containing the lengths of words in 'foo'",
        "A list of tuples, each containing a word from 'foo' and its length",
        "An error occurs"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet:",
      "codeSnippet": "foo = \"my name is john doe\"\nbar = foo.capitalize().split().sort(key=lambda x: x[0])\nprint(bar)",
      "explanation": "The given code first capitalizes the string stored in 'foo', resulting in 'My name is john doe'. Then it splits the string into a list of words ['My', 'name', 'is', 'john', 'doe']. The 'sort()' method is then called on this list with a lambda function sorting by the first character of each word. However, 'sort()' modifies the list in place and returns 'None'. Therefore, when 'print(bar)' is executed, it prints 'None' as the 'sort()' method does not return the sorted list.",
      "correctAnswer": "None",
      "incorrectAnswers": [
        "['is', 'john', 'doe', 'My', 'name']",
        "['My', 'name', 'is', 'john', 'doe']",
        "['doe', 'is', 'john', 'My', 'name']",
        "['john', 'doe', 'is', 'My', 'name']",
        "Syntax Error"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet:",
      "codeSnippet": "def foo(bar):\n    output = []\n    for i in bar:\n        if i % 2 == 0 and i not in output:\n            output.append(i)\n    return output\n\nx = [1, 4, 2, 2, 3, 4, 5, 6, 6]\nprint(foo(x))",
      "explanation": "The function 'foo' takes a list 'bar' and creates an empty list 'output'. It then iterates over 'bar', adding each even number to 'output' only if it is not already present. For the given list 'x', the even numbers are 4, 2, and 6. Each of these numbers is added to 'output' only once, despite some of them appearing more than once in 'x'. Hence, the final list 'output' is [4, 2, 6], and that is the output of the code.",
      "correctAnswer": "[4, 2, 6]",
      "incorrectAnswers": [
        "[1, 3, 5]",
        "[4, 2, 3, 6]",
        "[1, 4, 2, 3, 5, 6]",
        "[2, 4, 6]",
        "[1, 2, 3, 4, 5, 6]"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet:",
      "codeSnippet": "foo = [bool(i*i) for i in range(5)]\nprint(foo)",
      "explanation": "The list comprehension 'bool(i*i) for i in range(5)' generates a list where each element is the boolean value of the square of numbers from 0 to 4. The 'bool' function converts its argument to a boolean, where 0 is 'False' and any non-zero number is 'True'. The squares of the numbers from 0 to 4 are [0, 1, 4, 9, 16]. The boolean values of these numbers are [False (for 0), True (for 1), True (for 4), True (for 9), True (for 16)]. Therefore, the output is [False, True, True, True, True].",
      "correctAnswer": "[False, True, True, True, True]",
      "incorrectAnswers": [
        "[True, True, True, True, True]",
        "[False, False, True, True, True]",
        "[False, True, False, True, False]",
        "[True, False, True, False, True]",
        "[None, None, None, None, None]"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the last printed number in the output of the following Python code snippet?",
      "codeSnippet": "for i in range(1, 10, -1):\n    print(i)",
      "explanation": "The 'range' function in Python creates a sequence of numbers. In this case, the 'range' function is defined with a start of 1, an end of 10, and a step of -1. However, since the start value (1) is less than the end value (10), and the step is negative, the 'range' function generates an empty sequence. Consequently, the 'for' loop does not iterate over any values, and nothing gets printed. This question tests understanding of the 'range' function in Python, especially how it behaves with different start, end, and step values.",
      "correctAnswer": "Nothing is printed",
      "incorrectAnswers": ["Infinite loop", "Recursion error", "1", "9", "0"]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "numbers = [1, 2, 3, 4, 5]\ntotal = 0\n\nfor number in numbers:\n    numbers.remove(number)\n    total += numbers[0]\n\nprint(total)",
      "explanation": "This code modifies the list 'numbers' while iterating over it, which is a common source of confusion. In each iteration, the first element of the list is removed, and the next element becomes the new first element. In the first iteration, '1' is removed and '2' (the new first element) is added to 'total'. In the next iteration, '3' is removed (since it's now the first element after '2' was removed) and '4' is added to 'total'. The loop thus adds 2 and 4 to 'total', resulting in 6. After these two iterations, the loop ends because there are no more elements to iterate over in the modified list. Therefore, the final output is 6.",
      "correctAnswer": "6",
      "incorrectAnswers": ["15", "10", "5", "9", "None of these"]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "def foo(nums, threshold):\n    return [x**2 for x in nums if x > threshold]\n\nnums = [1, 4, 6, 8, 3, 2, 9]\nthreshold = 5\nresult = foo(nums, threshold)\n\nprint(result)",
      "explanation": "The function 'foo' is a list comprehension that squares each number in 'nums' if it is greater than 'threshold'. The 'nums' list is [1, 4, 6, 8, 3, 2, 9], and 'threshold' is 5. Numbers greater than 5 in this list are 6, 8, and 9. Squaring these numbers results in 36 (6*6), 64 (8*8), and 81 (9*9), respectively. Therefore, the output of the function, and consequently the print statement, is [36, 64, 81].",
      "correctAnswer": "[36, 64, 81]",
      "incorrectAnswers": [
        "[1, 16, 36, 64, 9, 4, 81]",
        "[6, 8, 9]",
        "[36, 49, 64, 81]",
        "[25, 36, 49, 64, 81]",
        "None of these"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = \"Data Science is fun!\"\nbar = foo[::-1]\nfoo_bar = bar[5:7] + bar[-4] + bar[8:11]\nprint(foo_bar)",
      "explanation": "The code snippet reverses the string 'foo' using the slice 'foo[::-1]', resulting in 'bar' being '!nuf si ecneicS ataD'. The slice 'bar[5:7]' extracts 'si', 'bar[-4]' gets the character 'a', and 'bar[8:11]' extracts 'ecn'. Concatenating these parts forms 'siaecn', which is the output of the print statement.",
      "correctAnswer": "siaecn",
      "incorrectAnswers": [
        "cneais",
        "fun!si",
        "Science",
        "!nuf si",
        "SyntaxError"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "import re\n\nfoo = \"Hello, world!\"\nregex_pattern = r\"world\"\nbar = re.search(regex_pattern, foo)\nprint(\"Found\" if bar else \"Not found\")",
      "explanation": "The regular expression pattern 'world' is used to search for the occurrence of the word 'world' in the string 'foo'. The 're.search' function checks if the pattern exists anywhere in the string. Since 'foo' contains the substring 'world', the search is successful, and 'bar' is assigned a match object. Consequently, the condition in the print statement evaluates to 'Found'. If there were no match, it would print 'Not found'. Therefore, the output of this code is 'Found'.",
      "correctAnswer": "\"Found\"",
      "incorrectAnswers": [
        "\"Not found\"",
        "\"world\"",
        "None",
        "SyntaxError",
        "TypeError"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "try:\n    foo = 10 / (0 + 1)\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero\")\nfinally:\n    print(\"End of operation\")",
      "explanation": "In the code snippet, the `try` block contains a division operation, which does not result in a `ZeroDivisionError` because '0 + 1' evaluates to 1, and dividing by 1 is valid. Therefore, the `except` block is not executed. The `finally` block is always executed regardless of whether an exception occurred or not. Hence, the output of the code is \"End of operation\".",
      "correctAnswer": "\"End of operation\"",
      "incorrectAnswers": [
        "\"Cannot divide by zero\"",
        "ZeroDivisionError",
        "10",
        "Nothing is printed",
        "SyntaxError"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nbar = [not i % 11 for i in foo if i % 5]\nprint(any(bar))",
      "explanation": "The list comprehension in the code creates a new list 'bar'. It includes 'not i % 11' for each element 'i' in 'foo' if 'i % 5' is true (i.e., if 'i' is not divisible by 5). Since none of the numbers in 'foo' are multiples of 11, 'i % 11' will always be true, making 'not i % 11' always false. Therefore, 'bar' contains only 'False' values. The `any()` function checks if any element in 'bar' is true. Since all are false, `any(bar)` returns 'False'.",
      "correctAnswer": "False",
      "incorrectAnswers": [
        "True",
        "[True, False, False, False, False, False, False, False]",
        "[False, False, False, False, False, False, False, False]",
        "SyntaxError",
        "TypeError"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = [[0] * 5 for _ in range(6)]\nprint(len(foo[4]))",
      "explanation": "The code snippet creates a list of lists named 'foo' using a list comprehension. Each element in 'foo' is a list containing five zeros ('[0] * 5'). This is repeated for six rows ('for _ in range(6)'). The statement 'len(foo[4])' calculates the length of the fifth row (index 4, as indexes start from 0) in the list 'foo'. Since each row is a list of five zeros, the length of the fifth row is also 5. Therefore, the output of the code is 5.",
      "correctAnswer": "5",
      "incorrectAnswers": ["0", "6", "4", "1", "TypeError"]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "temperature = 25.5678\nmessage = f\"The current temperature is {temperature:.2f}\u00b0C.\"\nprint(message)",
      "explanation": "The code snippet uses an f-string with a format specifier to control the precision of the floating-point number 'temperature'. The format specifier ':.2f' inside the curly braces indicates that the variable 'temperature' should be formatted as a floating-point number with two decimal places. Therefore, the value '25.5678' is rounded to '25.57', and the output of the print statement is \"The current temperature is 25.57\u00b0C.\".",
      "correctAnswer": "\"The current temperature is 25.57\u00b0C.\"",
      "incorrectAnswers": [
        "\"The current temperature is 25.5\u00b0C.\"",
        "\"The current temperature is 25.568\u00b0C.\"",
        "SyntaxError",
        "\"The current temperature is 25.5678\u00b0C.\"",
        "TypeError"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = 10\n\nfor i in range(10):\n    if i == foo:\n        print(foo + i)\n        break\nelse:\n    print(foo - i)",
      "explanation": "The variable 'foo' is initialized to 10. The for loop iterates over the numbers from 0 to 9. The if condition within the loop checks if 'i' is equal to 'foo'. Since 'foo' is 10 and the range of 'i' is only up to 9, the condition 'i == foo' is never met, and the loop never breaks early. The 'else' block of the for loop is executed when the loop completes without encountering a 'break' statement. When the loop ends, 'i' is 9, which is the last number in the range. Therefore, 'foo - i' is 10 - 9, resulting in 1. The output of the code is 1.",
      "correctAnswer": "1",
      "incorrectAnswers": ["20", "10", "0", "19", "9"]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = \"hello world\"\nbar = [i for i in foo]\nprint(\"\".join(bar))",
      "explanation": "The code snippet first assigns the string 'hello world' to the variable 'foo'. Then, a list comprehension is used to create a list 'bar', which contains each character of 'foo' as a separate element. The 'join' method is then used to concatenate all elements of 'bar' into a single string, with no separator (''). Since 'bar' contains each character of 'hello world', including the space, the output of the code is the string 'hello world'.",
      "correctAnswer": "hello world",
      "incorrectAnswers": [
        "['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']",
        "helloworld",
        "['hello', 'world']",
        "SyntaxError",
        "TypeError"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet involving JSON parsing?",
      "codeSnippet": "import json\n\nfoo = '{\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}'\nbar = json.loads(foo)\nprint(bar[\"age\"])",
      "explanation": "The code snippet first defines a JSON string 'foo' containing information about a person named Alice. The 'json.loads' method is used to parse this JSON string into a Python dictionary 'bar'. When accessing 'bar[\"age\"]', the value associated with the key 'age' in the dictionary is retrieved, which is the integer 30. Therefore, the output of the print statement is the integer 30.",
      "correctAnswer": "30",
      "incorrectAnswers": [
        "\"Alice\"",
        "ValueError",
        "\"New York\"",
        "SyntaxError",
        "TypeError"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "import os\n\nfoo = os.getcwd()\nprint(foo)",
      "explanation": "The code imports the 'os' module, which provides a portable way of using operating system-dependent functionality. The 'os.getcwd()' function is used to get the current working directory of the Python process. The variable 'foo' is set to this directory path, and the print statement outputs this path as a string. Therefore, the output of the code is the path to the current working directory.",
      "correctAnswer": "The current working directory path",
      "incorrectAnswers": [
        "The name of the current Python file",
        "A list of files in the current directory",
        "The Python version currently being used",
        "SyntaxError",
        "TypeError"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What does the function 'foo' check for when given a string 'x' as input?",
      "codeSnippet": "import os\n\n\ndef foo(x):\n    for i in os.listdir():\n        if i == x:\n            return True\n    return False",
      "explanation": "The function 'foo' uses 'os.listdir()' to iterate through all the files and directories in the current working directory. It checks each item to see if its name matches the input string 'x'. The function returns 'True' if it finds a file or directory with a name that matches 'x', and 'False' otherwise. This indicates that the function is checking if a file or directory named 'x' exists in the current directory.",
      "correctAnswer": "If a file or directory named 'x' exists in the current directory",
      "incorrectAnswers": [
        "If 'x' is a valid path in the file system",
        "If 'x' is the name of the current working directory",
        "If 'x' is an environment variable",
        "If 'x' is the name of an executable file in the current directory",
        "If 'x' is a Python script in the current directory"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "import csv\n\nfoo = \"\"\"Name,Department,Age\nAlice,Engineering,30\nBob,HR,45\"\"\"\n\nbar = []\nfor i in csv.reader(foo.splitlines()):\n    bar.append(i)\n\nprint(bar[1][1])",
      "explanation": "The code snippet processes a multi-line string 'foo' using the 'csv.reader' function, which reads CSV-formatted data. 'foo.splitlines()' splits the string into separate lines, mimicking the lines of a CSV file. The for loop iterates over each line, parsed as a list by 'csv.reader', and appends each list to 'bar'. 'bar[1]' accesses the second line (after the header) of the CSV data, which is ['Alice', 'Engineering', '30']. 'bar[1][1]' then accesses the second element of this list, which is 'Engineering'. Therefore, the output of the code is 'Engineering'.",
      "correctAnswer": "\"Engineering\"",
      "incorrectAnswers": ["\"Alice\"", "\"HR\"", "30", "45", "SyntaxError"]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "import math\n\nfoo = 16\nbar = math.sqrt(foo)\nprint(int(math.pow(bar, 2)))",
      "explanation": "The code first calculates the square root of 'foo' (which is 16), resulting in 'bar' being 4 (since the square root of 16 is 4). Then, 'math.pow(bar, 2)' calculates the square of 'bar', which is 4^2 = 16. Finally, 'int()' is used to convert this result to an integer, though this is not strictly necessary as 'math.pow()' with integer arguments will already return an integer value. Therefore, the output of the code is 16.",
      "correctAnswer": "16",
      "incorrectAnswers": ["4", "256", "8", "2", "SyntaxError"]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "import sys\n\nprint(sys.version)",
      "explanation": "The code imports the 'sys' module, which provides access to some variables used or maintained by the Python interpreter and to functions that interact strongly with the interpreter. The 'sys.version' attribute contains a string with the version number of the current Python interpreter plus additional information on the build number and compiler used. Thus, when 'print(sys.version)' is executed, it outputs the version of Python currently in use, along with additional build information.",
      "correctAnswer": "The current Python version and additional info",
      "incorrectAnswers": [
        "The current version of the operating system",
        "The current version of linux",
        "The current working directory",
        "SyntaxError",
        "TypeError"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = 10; bar = foo + 2; bar = foo - bar\n\nprint(bar)",
      "explanation": "In this code, 'foo' is initially set to 10. 'bar' is then set to 'foo + 2', which evaluates to 12. Next, 'bar' is updated to be 'foo - bar', which is 10 - 12, resulting in -2. Thus, when 'print(bar)' is executed, the output is -2.",
      "correctAnswer": "-2",
      "incorrectAnswers": ["2", "10", "0", "12", "20"]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "p = True\nq = False\n\nprint(not p and q or not (p or not q))",
      "explanation": "The expression involves logical operators 'not', 'and', and 'or'. First, 'not p' is False, and 'q' is False, so 'not p and q' is False. Next, 'p or not q' is True since 'p' is True, so 'not (p or not q)' is False. Finally, 'False or False' is False. Therefore, the output of the code is False.",
      "correctAnswer": "False",
      "incorrectAnswers": [
        "True",
        "None",
        "Syntax Error",
        "Runtime Error",
        "TypeError"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(id(256) == id(128 + 128))",
      "explanation": "In Python, small integers (typically from -5 to 256) are cached and reused for performance reasons. The `id()` function returns the unique identifier of an object. Since both `256` and `128 + 128` evaluate to 256, which falls within this caching range, they refer to the same integer object in memory. Therefore, their ids are the same, and the output of the code is `True`.",
      "correctAnswer": "True",
      "incorrectAnswers": [
        "False",
        "Syntax Error",
        "Runtime Error",
        "TypeError",
        "None"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(\"a\" * 5 is \"aaaaa\")",
      "explanation": "In Python, the expression '\"a\" * 5' creates a new string by repeating the character 'a' five times, resulting in 'aaaaa'. The 'is' operator checks for object identity, not just value equality. Due to Python's optimization for small strings, both '\"a\" * 5' and '\"aaaaa\"' refer to the same string object in memory. Therefore, their identity is the same, and the output of the code is `True`. This behavior might vary across different Python implementations and is not recommended to be relied upon for checking string equality.",
      "correctAnswer": "True",
      "incorrectAnswers": [
        "False",
        "Syntax Error",
        "Runtime Error",
        "TypeError",
        "None"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print([0, 1, 2, 3, 4][::-2])",
      "explanation": "The code snippet demonstrates the use of Python list slicing with a negative step. The slice `[::-2]` starts from the end of the list and selects every second element moving backwards. For the list `[0, 1, 2, 3, 4]`, this results in `[4, 2, 0]`, as it starts with the last element (4), skips one element (3), includes the next (2), skips one element (1), and includes the next (0). Thus, the output of the code is `[4, 2, 0]`.",
      "correctAnswer": "[4, 2, 0]",
      "incorrectAnswers": [
        "[0, 2, 4]",
        "[1, 3]",
        "[4, 3, 2, 1, 0]",
        "Syntax Error",
        "TypeError"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(next(enumerate('Python')))",
      "explanation": "The `enumerate` function in Python adds a counter to an iterable and returns it in a form of an enumerate object. This object yields pairs containing a count (from start, which defaults to 0) and the values obtained from iterating over the iterable. The `next` function retrieves the next item from the iterator, which in this case is the first item of the enumeration of the string 'Python'. Since enumeration starts from 0, the first item is `(0, 'P')`, representing the index 0 and the first character 'P' of the string 'Python'. Therefore, the output of the code is `(0, 'P')`.",
      "correctAnswer": "(0, 'P')",
      "incorrectAnswers": [
        "(1, 'P')",
        "(0, 'y')",
        "Syntax Error",
        "Runtime Error",
        "TypeError"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(max(abs(-255), -1, 0, abs(1), 2))",
      "explanation": "The `max` function in Python returns the largest of the input values. The `abs` function returns the absolute value of a number. In this code, `abs(-255)` returns 255, and `abs(1)` returns 1. The values being compared are 255, -1, 0, 1, and 2. Among these, the largest value is 255. Therefore, the output of the code is '255'. This question tests understanding of the `max` function and its interaction with the `abs` function.",
      "correctAnswer": "255",
      "incorrectAnswers": ["-255", "-1", "0", "1", "2"]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(divmod(24, 4))",
      "explanation": "The `divmod` function in Python takes two numbers as arguments and returns a tuple consisting of their quotient and remainder. When dividing 24 by 4, the quotient is 6 and the remainder is 0, since 24 is evenly divisible by 4. Therefore, `divmod(24, 4)` returns (6, 0), and the output of the code is '(6, 0)'. This function is useful for obtaining both the quotient and remainder of a division operation in a single step.",
      "correctAnswer": "(6, 0)",
      "incorrectAnswers": ["(0, 6)", "6", "0", "TypeError", "SyntaxError"]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = [True, True, False]\nbar = [any(foo), all(foo)]\nprint(any(bar))",
      "explanation": "The `any` function returns True if any element in the iterable is True, otherwise False. The `all` function returns True if all elements in the iterable are True, otherwise False. In the list `foo`, `any(foo)` returns True because there are True elements, but `all(foo)` returns False because not all elements are True. Thus, `bar` becomes [True, False]. When `any(bar)` is called, it returns True since one of the elements in `bar` is True. Therefore, the output of the code is 'True'. This code snippet tests the understanding of the `any` and `all` functions and their behavior with different types of iterables.",
      "correctAnswer": "True",
      "incorrectAnswers": [
        "False",
        "[True, False]",
        "[False, True]",
        "Syntax Error",
        "TypeError"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code involving set operations?",
      "codeSnippet": "p = {1, 2, 3}\nq = {3, 4, 5}\n\nprint(p.intersection(q))",
      "explanation": "The 'intersection' method in Python, when used with sets, returns a new set containing only elements that are common to both sets. In this code, 'p.intersection(q)' will return the set of elements that are present in both 'p' ({1, 2, 3}) and 'q' ({3, 4, 5}). The only common element between these two sets is '3'. Therefore, the output of the print statement will be '{3}'.",
      "correctAnswer": "{3}",
      "incorrectAnswers": [
        "{1, 2, 3, 4, 5}",
        "{4, 5}",
        "SyntaxError",
        "{}",
        "{1, 2}"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code involving set operations?",
      "codeSnippet": "p = {1, 2, 3}\nq = {3, 4, 5}\n\nprint(p.union(q))",
      "explanation": "The 'union' method in Python, when used with sets, returns a new set containing all elements from both sets, but each element is unique. In this code, 'p.union(q)' combines the elements of sets 'p' ({1, 2, 3}) and 'q' ({3, 4, 5}). The result is a set that includes every unique element from both 'p' and 'q', which are {1, 2, 3, 4, 5}. Note that the common element '3' is included only once in the union. Therefore, the output of the print statement will be '{1, 2, 3, 4, 5}'.",
      "correctAnswer": "{1, 2, 3, 4, 5}",
      "incorrectAnswers": [
        "{3}",
        "{1, 2, 3, 3, 4, 5}",
        "Error",
        "{}",
        "{1, 2, 4, 5}"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code involving a recursive function?",
      "codeSnippet": "def foo(x):\n    return 0 if x < 2 else foo(x - 1) + 1\n\nprint(foo(5))",
      "explanation": "The function 'foo' is a recursive function that returns 0 if the input 'x' is less than 2. Otherwise, it calls itself with 'x - 1' and adds 1 to the result. When 'foo(5)' is called, the function executes recursively as follows: 'foo(5)' calls 'foo(4)', 'foo(4)' calls 'foo(3)', 'foo(3)' calls 'foo(2)', and 'foo(2)' calls 'foo(1)'. Since 'foo(1)' returns 0, each call adds 1 to this result as the recursion unwinds. The final output is the sum of these added ones, which is 4. Therefore, the output of the print statement will be '4'.",
      "correctAnswer": "4",
      "incorrectAnswers": ["3", "5", "0", "Error", "1"]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code involving tuples?",
      "codeSnippet": "foo = (100,)\nbar = foo * 2\nprint(bar)",
      "explanation": "In this code, 'foo' is a tuple containing a single element, 100. The syntax '(100,)' is used to define a single-element tuple in Python. The expression 'foo * 2' multiplies the tuple 'foo' by 2, which results in the tuple being concatenated with itself. Therefore, 'bar' becomes '(100, 100)'. The output of the print statement will thus be '(100, 100)'.",
      "correctAnswer": "(100, 100)",
      "incorrectAnswers": [
        "(200,)",
        "(100, 100, 100, 100)",
        "SyntaxError",
        "None",
        "(100,)"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code involving variable types?",
      "codeSnippet": "foo = (\"hello world\")\nprint(type(foo))",
      "explanation": "In this code, 'foo' is assigned the value 'hello world' enclosed in parentheses. However, since there is no comma within the parentheses, Python interprets this as a string, not a tuple. In Python, a single-element tuple must have a comma after the element, like '(element,)'. Without the comma, it's just a regular expression in parentheses. Therefore, 'foo' is a string, and the output of 'print(type(foo))' will be '<class 'str'>'.",
      "correctAnswer": "<class 'str'>",
      "incorrectAnswers": [
        "<class 'tuple'>",
        "<class 'int'>",
        "Error",
        "None",
        "<class 'list'>"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code involving dictionary keys and list comprehension?",
      "codeSnippet": "foo = {\"1\": 1, \"2\": 4, \"3\": 9}\nbar = [int(i)**2 for i in foo.keys()]\nprint(bar)",
      "explanation": "In this code, 'foo' is a dictionary with string keys and integer values. The list comprehension '[int(i)**2 for i in foo.keys()]' iterates over the keys of the dictionary 'foo', converts each key to an integer using 'int(i)', and then squares it with '**2'. The keys of 'foo' are the strings '1', '2', and '3', which when converted to integers and squared result in 1, 4, and 9, respectively. Therefore, the output of the print statement will be '[1, 4, 9]'.",
      "correctAnswer": "[1, 4, 9]",
      "incorrectAnswers": [
        "[1, 16, 81]",
        "[1, 2, 3]",
        "Error",
        "[1, 2, 4, 3, 9]",
        "[]"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code involving a class and its method?",
      "codeSnippet": "class Foo:\n    def __init__(self, x):\n        self.value = x\n\n    def get_value(self):\n        return self.value\n\nfoo = Foo(5)\nprint(foo.get_value())",
      "explanation": "In this code, a class named 'Foo' is defined with an initializer (`__init__`) that takes a parameter 'x' and assigns it to the instance variable 'value'. The class also has a method 'get_value' that returns the value of this instance variable. An object 'foo' of class 'Foo' is created with the value '5'. When 'foo.get_value()' is called, it returns the value of the 'value' instance variable of 'foo', which is '5'. Therefore, the output of the print statement will be '5'.",
      "correctAnswer": "5",
      "incorrectAnswers": ["Foo(5)", "SyntaxError", "None", "0", "TypeError"]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code involving exception handling?",
      "codeSnippet": "foo = 1 / 0\n\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero\")\nfinally:\n    print(\"Done\")",
      "explanation": "This code snippet attempts to perform division by zero, which will raise a 'ZeroDivisionError'. However, the syntax for exception handling is incorrect. The correct way to handle exceptions in Python is by using a 'try' block followed by 'except' blocks. This snippet is missing the 'try' block. As a result, Python will raise a syntax error when it encounters the 'except' statement outside of the proper 'try-except' structure. Therefore, the output of this code will be a 'SyntaxError'.",
      "correctAnswer": "SyntaxError",
      "incorrectAnswers": [
        "Cannot divide by zero\nDone",
        "Done",
        "Cannot divide by zero",
        "ZeroDivisionError",
        "None"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code involving set comprehensions?",
      "codeSnippet": "foo = [1, 1, 2, 2, 3, 3]\nbar = {i + 1 for i in foo}\nprint(bar)",
      "explanation": "The code uses a set comprehension to create a new set 'bar' from the list 'foo'. In the set comprehension '{i + 1 for i in foo}', each element 'i' in the list 'foo' is incremented by 1 and then added to the set 'bar'. Since sets automatically remove duplicate elements, the repeated elements in 'foo' result in unique elements in 'bar'. The original list 'foo' contains the elements [1, 1, 2, 2, 3, 3]. When incremented by 1, these elements become 2, 2, 3, 3, 4, 4. However, in the set 'bar', each element appears only once, resulting in {2, 3, 4}. Therefore, the output of the print statement will be '{2, 3, 4}'.",
      "correctAnswer": "{2, 3, 4}",
      "incorrectAnswers": [
        "[2, 3, 4]",
        "{1, 2, 3, 4, 5, 6}",
        "Error",
        "{2, 2, 3, 3, 4, 4}",
        "{1, 2, 3}"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "name = \"John\\nChristian\\nDoe\"\nfoo = name.splitlines()\nbar = \" \".join(foo)\nprint(bar)",
      "explanation": "The code starts with a string 'name' that contains three names separated by newline characters ('\\n'). The 'splitlines()' method is used to split the string into a list of lines, resulting in the list ['John', 'Christian', 'Doe']. Then, 'join()' is used to join the elements of this list into a single string, with spaces (' ') between each element. Therefore, the final output of the code is the string 'John Christian Doe', with each name separated by a single space.",
      "correctAnswer": "John Christian Doe",
      "incorrectAnswers": [
        "JohnChristianDoe",
        "John\\nChristian\\nDoe",
        "['John', 'Christian', 'Doe']",
        "John\nChristian\nDoe",
        "Error"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "def multiply(x, y=2):\n    return x * y\n\nresult = multiply(5) + multiply(3, 3)\nprint(result)",
      "explanation": "The 'multiply' function multiplies two numbers, with a default value of 2 for the second parameter. The first call, 'multiply(5)', multiplies 5 by 2, returning 10. The second call, 'multiply(3, 3)', multiplies 3 by 3, returning 9. Adding these together gives 19.",
      "correctAnswer": "19",
      "incorrectAnswers": ["10", "15", "18", "21", "24"]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "foo = ['a', 'b', 'c', 'd', 'e']\nbar = foo[::2]\nprint(bar)",
      "explanation": "The code uses slicing with a step of 2 to get every other element of the list 'foo'. It starts with the first element ('a') and then skips one element each time. The resulting list is ['a', 'c', 'e'].",
      "correctAnswer": "['a', 'c', 'e']",
      "incorrectAnswers": [
        "['b', 'd']",
        "['a', 'b', 'c']",
        "SyntaxError",
        "['a', 'b', 'd', 'e']",
        "['c', 'e']"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the result of the following Python expression?",
      "codeSnippet": "print(list(set([1, 2, 2, 3, 4, 4, 5])))",
      "explanation": "The code first converts a list with duplicate elements into a set, which removes the duplicates. The resulting set is then converted back into a list. The final list will be [1, 2, 3, 4, 5]. Note that the order of elements in the set (and therefore in the final list) is not guaranteed.",
      "correctAnswer": "[1, 2, 3, 4, 5]",
      "incorrectAnswers": [
        "[1, 2, 3, 4]",
        "[2, 4, 5]",
        "TypeError",
        "[1, 3, 5]",
        "SyntaxError"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What will the following Python code output?",
      "codeSnippet": "x = 5\ny = x is not None and isinstance(x, int)\nprint(y)",
      "explanation": "The code first checks if 'x' is not 'None' and then checks if 'x' is an instance of 'int'. Since both conditions are true for 'x = 5', the result is 'True'.",
      "correctAnswer": "True",
      "incorrectAnswers": ["False", "TypeError", "None", "5", "SyntaxError"]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "foo = 10\nbar = 5\ntry:\n    result = foo // bar\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')\nelse:\n    print(result)",
      "explanation": "The code in the 'try' block executes without any exceptions, as dividing 10 by 5 results in 2. Since there's no 'ZeroDivisionError', the 'except' block is skipped, and the 'else' block is executed, printing the 'result', which is 2.",
      "correctAnswer": "2",
      "incorrectAnswers": [
        "Cannot divide by zero",
        "5",
        "ZeroDivisionError",
        "None",
        "1"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = [i for i in range(10) if i % 2 == 0]\nprint(sum(foo))",
      "explanation": "The list comprehension creates a list of even numbers from 0 to 9 (inclusive). These numbers are 0, 2, 4, 6, and 8. The 'sum' function calculates the total of these numbers, which is 20.",
      "correctAnswer": "20",
      "incorrectAnswers": ["10", "25", "15", "5", "30"]
    },
    {
      "difficulty": "medium",
      "question": "What does the following Python code print?",
      "codeSnippet": "foo = 15\nif foo > 10:\n    print('Greater than 10')\nelif foo == 10:\n    print('Equal to 10')\nelse:\n    print('Less than 10')",
      "explanation": "The if-elif-else block checks the value of 'foo'. Since 'foo' is 15, which is greater than 10, 'Greater than 10' is printed.",
      "correctAnswer": "Greater than 10",
      "incorrectAnswers": [
        "Equal to 10",
        "Less than 10",
        "15",
        "SyntaxError",
        "foo"
      ]
    },
    {
      "difficulty": "medium",
      "question": "What is the result of the following Python expression?",
      "codeSnippet": "print(20 > 10 and 10 < 20)",
      "explanation": "The expression uses the logical 'and' operator. It checks if 20 is greater than 10 and if 10 is less than 20. Both conditions are True, so the result is True.",
      "correctAnswer": "True",
      "incorrectAnswers": ["False", "20", "10", "SyntaxError", "TypeError"]
    }
  ],
  "hard": [
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "def function(x):\n    return lambda y: y ** x\n\nprint(function(3)(3))",
      "explanation": "The function named 'function' takes an argument 'x' and returns a lambda function. This lambda function takes one argument 'y' and returns 'y ** x'. When 'function(3)(3)' is executed, it first returns a lambda function equivalent to 'lambda y: y ** 3', and then this lambda function is called with '3', resulting in '3 ** 3' which equals 27.",
      "correctAnswer": "27",
      "incorrectAnswers": ["None", "9", "6", "3", "Error"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "data = {'a': 1, 'b': 2, 'c': 3}\n\nfor index, key, value in enumerate(data):\n    if index > 1:\n        print(value)",
      "explanation": "The code results in an error because 'enumerate(data)' produces a sequence of tuples, each containing an index and a key from the dictionary, not a key-value pair. The correct way to unpack these tuples in the loop header would be 'for index, key in enumerate(data)'. As written, Python will raise a 'ValueError' due to attempting to unpack two items into three variables.",
      "correctAnswer": "Error",
      "incorrectAnswers": ["3", "2", "'c'", "None", "[('c', 3)]"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = [[1, 2], [3, 4], [5, 6]]\nbar = foo.copy()\nbar[2] = [7, 9]\nfoo[0].append(0)\n\nprint(len(bar[0]) + foo[2][-1])",
      "explanation": "The method 'copy()' creates a shallow copy of the list 'foo'. When 'bar[2]' is modified, it doesn't affect 'foo'. However, modifying the contents of 'foo[0]' (which is also referenced by 'bar[0]') affects both 'foo' and 'bar'. After appending 0 to 'foo[0]', the length of 'bar[0]' becomes 3. The last element of 'foo[2]' remains 6. Therefore, the expression 'len(bar[0]) + foo[2][-1]' evaluates to 3 + 6, which is 9.",
      "correctAnswer": "9",
      "incorrectAnswers": ["7", "8", "10", "11", "12"]
    },
    {
      "difficulty": "hard",
      "question": "What will be printed when the following code is executed?",
      "codeSnippet": "def foo(bar=[]):\n    if len(bar) > 5:\n        print(bar[-1])\n    else:\n        bar.append(len(bar))\n\nfoo([1, 2])\nfoo()\nfoo([3, 4])\nfoo()\nfoo([5, 6])\nfoo()",
      "explanation": "In this code, the 'foo' function prints the last element of the list 'bar' if its length is greater than 5. Otherwise, it appends the current length of 'bar' to itself. The function is first called with [1, 2], and nothing is printed. The next call, 'foo()', uses the default list 'bar', which is empty initially, and appends its length (0) to itself. Subsequent calls either pass a new list, which doesn't affect the default list, or continue to append to the default list without ever exceeding the length of 5. Therefore, nothing gets printed throughout the execution of this code.",
      "correctAnswer": "Nothing will be printed",
      "incorrectAnswers": ["2, 4, 6", "0, 1, 2", "5", "1, 2, 3", "2, 3"]
    },
    {
      "difficulty": "hard",
      "question": "What will be printed when the following code is executed?",
      "codeSnippet": "class Foo:\n    def __init__(self):\n        self.__hidden_number = 7\n\n    def add_number(self, number):\n        return self.__hidden_number + number\n\n\nclass Bar(Foo):\n    def __init__(self):\n        super().__init__()\n        self.__hidden_number = 3\n\n\ninstance = Bar()\nresult = instance.add_number(5)\nprint(result)",
      "explanation": "In this code, 'Bar' inherits from 'Foo'. However, the variable '__hidden_number' is name-mangled due to the double underscores, which makes it specific to the class it's defined in. When the 'Bar' instance is created, it first calls 'Foo's __init__, setting 'self.__hidden_number' to 7, and then 'Bar's __init__ sets a different '__hidden_number' to 3, but this doesn't affect the one in 'Foo'. When 'add_number' is called, it uses 'Foo's '__hidden_number', which is 7. Adding 5 to it results in 12.",
      "correctAnswer": "12",
      "incorrectAnswers": ["8", "10", "3", "5", "7"]
    },
    {
      "difficulty": "hard",
      "question": "What does the function 'foo' do when given a number as input?",
      "codeSnippet": "def foo(num):\n    if num < 2:\n        return False\n\n    if num > 2 and num % 2 == 0:\n        return False\n\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n\n    return True\n\nfor i in range(30):\n    if foo(i):\n        print(i)",
      "explanation": "The function 'foo' checks if a given number is a prime number. It first eliminates numbers less than 2 and even numbers greater than 2 as they are not prime. Then, it checks for factors only up to the square root of the number, incrementing by 2 to skip even numbers. If no factors are found, it returns True, indicating the number is prime. This process aligns with option 'd' \u2013 checking if the number is divisible by any number up to its square root.",
      "correctAnswer": "Checks if the number is divisible by any number up to its square root.",
      "incorrectAnswers": [
        "Determines if the number is an even number.",
        "Calculates the factorial of the number.",
        "Verifies if the number is less than 2.",
        "Determines if the number is a perfect square.",
        "Finds if the number is greater than its square root."
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the result of the expression 'foo + bar' in the given Python code snippet involving a custom class 'Foo'?",
      "codeSnippet": "class Foo:\n    def __init__(self, x):\n        self.bar = x\n\n    def __add__(self, x):\n        return self.bar - x.bar\n\nfoo = Foo(8)\nbar = Foo(4)\nprint(foo + bar)",
      "explanation": "The '__add__' method in class 'Foo' is overridden to subtract the 'bar' attribute of the second operand from the first. When 'foo + bar' is executed, it translates to 'foo.__add__(bar)', which computes 'foo.bar - bar.bar' (8 - 4). Hence, the result is 4.",
      "correctAnswer": "4",
      "incorrectAnswers": ["12", "2", "An error occurs", "8", "0"]
    },
    {
      "difficulty": "hard",
      "question": "What is the time complexity of the following code in Big O notation, based on the variable 'n'?",
      "codeSnippet": "n = 100\n\nfor i in range(n):\n    print(i)",
      "explanation": "The code consists of a single for-loop that iterates 'n' times. The time complexity of a single for-loop iterating 'n' times is O(n), as the number of iterations is directly proportional to the value of 'n'. In this case, the time complexity is O(n) where 'n' is the variable being iterated over, even though it is assigned a fixed value (100) in the code.",
      "correctAnswer": "O(n)",
      "incorrectAnswers": ["O(1)", "O(log n)", "O(100)", "O(n^2)", "O(100n)"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet:",
      "codeSnippet": "import random\n\ndef foo(num):\n    choices = [num**2 + 5 for i in range(23, 41, 4)] * 3\n    return random.choice(choices)\n\nprint(foo(7))",
      "explanation": "The function 'foo' creates a list named 'choices' using a list comprehension. The expression 'num**2 + 5' with 'num' being 7 results in 54. The range(23, 41, 4) generates numbers from 23 to 41 in steps of 4, but these numbers are not used in the list comprehension itself. Instead, the list 'choices' is filled with the same value, 54, repeated multiple times (once for each number generated by range). When 'random.choice(choices)' is called, it randomly selects an element from 'choices', which will always be 54. Thus, the correct answer is '54'.",
      "correctAnswer": "54",
      "incorrectAnswers": [
        "0",
        "A random value between 23 and 41 that's divisible by 4",
        "23",
        "A value greater than 60 but less than 70",
        "A random value between 50 and 60"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet:",
      "codeSnippet": "def foo(x):\n    return lambda y: y + x\n\nbar = foo(5)\n\nprint(bar(5))",
      "explanation": "The function 'foo' returns a lambda function that takes one argument 'y' and returns 'y + x'. When 'foo(5)' is called, it returns a lambda function where 'x' is bound to 5. This returned function is then stored in 'bar'. Calling 'bar(5)' executes the lambda function with 'y' as 5, resulting in '5 + 5', which equals 10. Therefore, the output of the code is 10.",
      "correctAnswer": "10",
      "incorrectAnswers": ["0", "5", "Syntax Error", "None", "Type Error"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "def foo(num):\n    while True:\n        yield num * num\n        num += 1\n\nbar = foo(3)\nprint(next(bar))",
      "explanation": "The code defines a generator function 'foo' that yields the square of the given number and then increments it. The generator 'bar' is initialized with 'foo(3)', so when 'next(bar)' is called, it yields the square of 3, which is 9. The generator then increments the number to 4, but since 'next' is only called once, only the first value (9) is printed. The key concept here is understanding how generator functions and the 'next' function work in Python.",
      "correctAnswer": "9",
      "incorrectAnswers": [
        "16",
        "An infinite loop occurs",
        "3",
        "SyntaxError",
        "None"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "foo = [\"john\", \"jane\", \"olaf\", \"oliver\", \"julia\", \"francis\"]\nbar = list(filter(lambda x: len(x) >= 4, foo))\nprint(bar)",
      "explanation": "The code uses the 'filter' function with a lambda function to filter out elements from the list 'foo' based on the condition that the length of each element should be at least 4 characters. The lambda function 'lambda x: len(x) >= 4' returns 'True' for elements with 4 or more characters. As a result, 'bar' contains the same elements as bar since every name contain at least four characters.",
      "correctAnswer": "['john', 'jane', 'olaf', 'oliver', 'julia', 'francis']",
      "incorrectAnswers": [
        "['john', 'jane', 'oliver', 'julia', 'francis']",
        "['olaf', 'oliver', 'julia', 'francis']",
        "['john', 'jane', 'olaf']",
        "['oliver', 'julia', 'francis']",
        "[]"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "class Foo:\n    def __init__(self, x):\n        self.x = x\n\n    def __repr__(self):\n        return f\"{self.x * 2}\"\n\n    def to_string(self):\n        return f\"{self.x * 3}\"\n\n    def __str__(self):\n        return f\"{self.x * 4}\"\n\n    def represent(self):\n        return f\"{self.x * 5}\"\n\n\nfoo = Foo(1)\nprint(foo)",
      "explanation": "The class 'Foo' defines several methods for string representation: '__repr__', 'to_string', '__str__', and 'represent'. The '__repr__' method returns the object representation with the 'x' attribute multiplied by 2, 'to_string' returns it multiplied by 3, '__str__' returns it multiplied by 4, and 'represent' returns it multiplied by 5. When an instance of 'Foo' is printed using 'print(foo)', the '__str__' method is invoked by default, which returns 'self.x * 4'. Since 'self.x' is initialized to 1, this results in '1 * 4', which is 4. Therefore, the output of the code is '4'. This question tests understanding of Python's special methods for string representation and their usage in different contexts.",
      "correctAnswer": "4",
      "incorrectAnswers": ["2", "3", "5", "10", "15"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "import re\n\nfoo = \"Python 3.8 is more popular than Python 2.7!\"\nregex_pattern = r\"Python\\s[0-9]\\.[0-9]\"\nbar = re.findall(regex_pattern, foo)\nprint(len(bar))",
      "explanation": "The regular expression pattern 'Python\\s[0-9]\\.[0-9]' matches occurrences of the word 'Python' followed by a space, a single digit, a dot, and another single digit. In the string 'foo', this pattern matches 'Python 3.8' and 'Python 2.7'. The 're.findall' function returns all non-overlapping matches of the pattern in the string as a list. In this case, it finds two matches. Therefore, the length of the list 'bar', which is printed, is 2.",
      "correctAnswer": "2",
      "incorrectAnswers": ["0", "1", "4", "3", "SyntaxError"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "import re\n\nfoo = (\"Contact us at: info@example.com, support@example.net, or sales@sample.org\")\nregex_pattern = r\"[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,4}\"\nbar = re.findall(regex_pattern, foo)\nprint(len(bar))",
      "explanation": "The regular expression pattern '[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,4}' is designed to match email addresses. In this pattern, '[\\w.-]+' matches one or more word characters, dots, or hyphens, '@' is a literal character, '[\\w.-]+' matches the domain part of the email, and '\\.[a-zA-Z]{2,4}' matches the top-level domain between 2 to 4 letters long. The 're.findall' function searches for all non-overlapping matches of this pattern in the string 'foo', which contains three email addresses. Therefore, the length of the list 'bar', which is printed, is 3.",
      "correctAnswer": "3",
      "incorrectAnswers": ["0", "1", "2", "4", "SyntaxError"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "class Number:\n    def __init__(self, value):\n        self.value = value\n\n    def __gt__(self, other):\n        return self.value < other\n\n    def __lt__(self, other):\n        return self.value > other\n\n\nfoo = Number(5)\nbar = Number(3)\n\nif foo > bar:\n    print(foo.value)\nelse:\n    print(bar.value)",
      "explanation": "In this code, the 'Number' class overrides the greater-than ('__gt__') and less-than ('__lt__') comparison methods. However, the logic in these methods is reversed: '__gt__' returns 'True' if 'self.value' is less than 'other', and '__lt__' returns 'True' if 'self.value' is greater than 'other'. When comparing 'foo' and 'bar' with 'foo > bar', the '__gt__' method of 'foo' is called with 'bar.value' as 'other'. Since 'foo.value' (5) is greater than 'bar.value' (3), the overridden '__gt__' method returns 'False', and the 'else' block is executed, printing 'foo.value', which is 5.",
      "correctAnswer": "5",
      "incorrectAnswers": ["3", "None", "True", "False", "SyntaxError"]
    },
    {
      "difficulty": "hard",
      "question": "What is the purpose of the 'foo' decorator in the following Python code snippet?",
      "codeSnippet": "from datetime import datetime\n\n\ndef foo(x):\n    def wrapper():\n        y = datetime.now()\n        x()\n        z = datetime.now()\n        print((z - y).total_seconds())\n    return wrapper\n\n\n@foo\ndef bar():\n    for i in range(10**6):\n        continue\n\n\nbar()",
      "explanation": "'foo' is a decorator function designed to measure and print the execution time of any function it decorates. It achieves this by defining a wrapper function that records the time immediately before and after the execution of the decorated function 'x' (in this case, 'bar'). The difference in these times, calculated using 'datetime.now()', provides the total execution time in seconds. Therefore, when 'bar' is executed with the 'foo' decorator, it prints the time taken for 'bar' to complete its operation, which is iterating through a range of 10**6 without performing any specific task.",
      "correctAnswer": "The decorator 'foo' is used to time how long it takes for the 'bar' function to run.",
      "incorrectAnswers": [
        "The 'foo' decorator is used to add a delay before and after the execution of 'bar'.",
        "It modifies the behavior of 'bar' to execute a loop a certain number of times.",
        "Foo adjusts the output of 'bar' to include the current date and time.",
        "The decorator 'foo' changes the 'bar' function to run at a specific time.",
        "The 'foo' decorator does not alter the execution or output of 'bar'."
      ]
    },
    {
      "difficulty": "hard",
      "question": "What does the function 'foo' check for when given a string 'x' as input?",
      "codeSnippet": "import os\n\n\ndef foo(x):\n    return any([True for i in os.listdir() if i == x])",
      "explanation": "The function 'foo' uses a list comprehension combined with the 'any()' function to check the presence of an item in the current directory. The list comprehension iterates over all items returned by 'os.listdir()', checking each one to see if its name matches the input string 'x'. If an item matches 'x', 'True' is added to the list. The 'any()' function then checks if any of the elements in the list are 'True'. The function returns 'True' if at least one match is found (i.e., a file or directory named 'x' exists in the current directory), and 'False' otherwise.",
      "correctAnswer": "If a file or directory named 'x' exists in the current directory",
      "incorrectAnswers": [
        "If 'x' is a part of any file or directory name in the current directory",
        "If the current directory is named 'x'",
        "If 'x' is a hidden file in the current directory",
        "If 'x' is a Python package",
        "If 'x' is a readable file in the current directory"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "from collections import Counter\n\nfoo = ['apple', 'banana', 'orange', 'apple', 'banana', 'apple']\nbar = Counter(foo)\nprint(list(bar)[-1])",
      "explanation": "The code snippet uses the 'Counter' class from the 'collections' module to count the occurrences of each element in the list 'foo'. The 'Counter(foo)' creates a dictionary-like object where keys are the elements of 'foo' and values are their respective counts. When converting this object to a list using 'list(bar)', the list only contains the keys, not the counts. The keys are ordered as they first appeared in 'foo'. The last element of this list is accessed using '[-1]', which is 'orange', as it's the last unique element to appear in the original list 'foo'. Therefore, the output of the code is 'orange'.",
      "correctAnswer": "orange",
      "incorrectAnswers": ["apple", "banana", "3", "2", "1"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet involving regular expressions?",
      "codeSnippet": "import re\n\nfoo = \"The rain in Spain\"\nbar = re.search(\"ai\", foo)\nprint(bar.start())",
      "explanation": "The Python code uses the 're' module to perform a regular expression search. The 're.search()' function is used to find the first occurrence of the pattern 'ai' in the string 'foo', which is 'The rain in Spain'. The method 'bar.start()' returns the starting index of the first match. The substring 'ai' first appears in 'rain', starting at index 5 (counting from 0). Therefore, the output of the code is 5.",
      "correctAnswer": "5",
      "incorrectAnswers": ["4", "7", "9", "None", "AttributeError"]
    },
    {
      "difficulty": "hard",
      "question": "What does the following Python code snippet output?",
      "codeSnippet": "from pathlib import Path\n\nfoo = Path('.')\nprint(foo.resolve())",
      "explanation": "The code uses the 'pathlib' module, which provides an object-oriented interface to the file system. The 'Path' class is instantiated with '.', which represents the current directory. The 'resolve()' method of the 'Path' object is used to make the path absolute. This means it converts the relative path ('.') to the absolute path, which is the full path to the current directory. Therefore, the output of the code is the absolute path of the current directory where the Python script is executed.",
      "correctAnswer": "The absolute path of the current directory",
      "incorrectAnswers": [
        "The relative path of the current directory",
        "The name of the current Python file",
        "A list of files in the current directory",
        "SyntaxError",
        "TypeError"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "import glob as pygame\n\nfoo = pygame.glob('*.py')\nprint(foo)",
      "explanation": "The code imports the 'glob' module with an alias 'pygame'. The 'glob' module provides a function 'glob.glob()' for Unix style pathname pattern expansion. The 'pygame.glob' (actually 'glob.glob') is called with the pattern '*.py', which matches all filenames in the current directory with the '.py' extension (Python files). The function returns a list of these filenames as strings. Therefore, the output of the code is a list of all Python files present in the current directory.",
      "correctAnswer": "A list of all Python files in the current directory",
      "incorrectAnswers": [
        "The contents of the first Python file in the current directory",
        "SyntaxError",
        "TypeError",
        "A snake game will start in the console",
        "A tuple of all python files on the computer"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "def foo(*args):\n    print(len(args))\n\nfoo(range(5))",
      "explanation": "The function 'foo' is defined with '*args', which allows it to accept any number of positional arguments. When 'foo(range(5))' is called, it is passing a single argument, which is a range object representing the numbers 0 to 4. The 'len(args)' inside the function counts the number of arguments passed to the function, which in this case is just one (the range object). Therefore, the output of the code is 1, as there is only one argument passed to the function.",
      "correctAnswer": "1",
      "incorrectAnswers": [
        "5",
        "0",
        "A TypeError",
        "A list of numbers from 0 to 4",
        "A range object"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "def foo(**kwargs):\n    for value, key in kwargs.items():\n        if key == \"apple\":\n            print(value)\n\nfoo(apple=1, orange=2, banana=3)",
      "explanation": "The function 'foo' is defined with '**kwargs', allowing it to accept keyword arguments. Inside the function, a for loop attempts to iterate over 'kwargs.items()', which returns pairs of key and value. However, the loop incorrectly tries to unpack each pair as 'value, key' instead of 'key, value'. Due to this, 'key' will never match the string \"apple\", and as a result, nothing gets printed. The correct unpacking should be 'for key, value in kwargs.items():'. Therefore, the output of the code is nothing.",
      "correctAnswer": "Nothing is printed",
      "incorrectAnswers": ["1", "2", "3", "apple", "A KeyError"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "p = True\nq = False\n\np = (not p or q) and (p and not q)\nq = not p or (q and not p)\n\nprint((p or not q) and not (not p and q))",
      "explanation": "Initially, 'p' is True and 'q' is False. The expression '(not p or q) and (p and not q)' evaluates to False, since 'not p' is False, 'q' is False, and 'p and not q' is True, making the entire expression False. Then, 'q = not p or (q and not p)' also evaluates to False, as 'not p' is False and 'q and not p' is False. Finally, '(p or not q) and not (not p and q)' simplifies to 'False or True and not (False and False)', which ultimately evaluates to False. Therefore, the output of the code is False.",
      "correctAnswer": "False",
      "incorrectAnswers": [
        "True",
        "None",
        "Syntax Error",
        "Runtime Error",
        "TypeError"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(all(x > 5 for x in range(6)))",
      "explanation": "The `all` function in Python checks if all elements in an iterable are True. The code snippet uses a generator expression to create an iterable where each element is the result of the expression 'x > 5' for each 'x' in 'range(6)'. Since 'range(6)' generates numbers from 0 to 5, none of these numbers is greater than 5. As a result, at least one element in the iterable is False (in fact, all of them are). Therefore, the `all` function returns False, making the output of the code False.",
      "correctAnswer": "False",
      "incorrectAnswers": [
        "True",
        "Syntax Error",
        "[0, 2, 4]",
        "[0, 1, 2, 3, 4, 5]",
        "None"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(hex(255))",
      "explanation": "The `hex` function in Python converts an integer number to a lowercase hexadecimal string prefixed with '0x'. When called with the integer 255, `hex(255)` returns '0xff'. In hexadecimal notation, 'ff' represents the decimal number 255, with the '0x' prefix indicating that the number is in hexadecimal format. Therefore, the output of the code is '0xff'.",
      "correctAnswer": "0xff",
      "incorrectAnswers": ["255", "ff", "0x255", "TypeError", "0b11111111"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "class Foo():\n    def __init__(self, x):\n        print(x, end='')\n\n\nclass Bar(Foo):\n    def __init__(self, x):\n        super().__init__(x*2)\n        print(x, end='')\n\n\nclass FooBar(Bar):\n    def __init__(self, x):\n        super().__init__(x * 2)\n        print(x)\n\nx = FooBar(1)",
      "explanation": "In this code, `FooBar` inherits from `Bar`, which in turn inherits from `Foo`. When `FooBar(1)` is instantiated, the `__init__` method in `FooBar` is called with `x` as 1. This method then calls `super().__init__(x * 2)`, which invokes `Bar`'s `__init__` method with `x * 2` (so 2). Inside `Bar`'s constructor, it first calls `super().__init__(x*2)` (invoking `Foo`'s `__init__` with 4), then prints `x` (2). Finally, back in `FooBar`'s constructor, it prints `x` (1). The sequence of print statements outputs '421'. Therefore, the output of the code is '421'.",
      "correctAnswer": "421",
      "incorrectAnswers": [
        "1",
        "4",
        "123",
        "Syntax Error",
        "Nothing is printed"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "class Foo:\n    def __init__(self, x):\n        self._inner = x\n\n    def __call__(self, y):\n        return self._inner(y)\n\n\nclass Bar:\n    def __init__(self, z):\n        self._z = z\n\n    def __call__(self, x):\n        return x * self._z\n\n\ndef foo_bar(x, y):\n    foo = Foo(Bar(x))\n    return foo(y)\n\nprint(foo_bar(3, 5))",
      "explanation": "This code snippet defines two classes, `Foo` and `Bar`, both of which implement the `__call__` method, making instances of these classes callable. When `foo_bar(3, 5)` is called, it first creates an instance of `Bar` with `x = 3` and then passes this instance to create an instance of `Foo`. When the `foo` instance is called with `y = 5`, it internally calls the `Bar` instance with 5. The `Bar` instance multiplies 5 with its internal state `_z`, which is 3, resulting in 15.",
      "correctAnswer": "15",
      "incorrectAnswers": ["3", "5", "10", "Error", "None"]
    },
    {
      "difficulty": "hard",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "def foo(x):\n    return x % 3 == 0\n\n\ndef bar(x): return not not foo(x)\n\n\nfoo_bar = list(filter(bar, range(10)))\n\nprint(foo_bar)",
      "explanation": "The function 'foo' returns True if the input 'x' is divisible by 3. The function 'bar' uses double negation on the result of 'foo', which essentially does not change the Boolean value returned by 'foo'. The 'filter' function is used to apply 'bar' on each element in the range from 0 to 9. It filters the elements for which 'bar' returns True, which are the numbers divisible by 3 in this range. Therefore, the output of the code is [0, 3, 6, 9], which are the numbers divisible by 3 in the given range.",
      "correctAnswer": "[0, 3, 6, 9]",
      "incorrectAnswers": [
        "[1, 4, 7]",
        "[2, 5, 8]",
        "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "[3, 6, 9]",
        "[]"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "class Vehicle:\n    def __init__(self, name, wheels):\n        self.name = name\n        self.wheels = wheels\n\n    def drive(self):\n        pass\n\n\nclass Car(Vehicle):\n    def __init__(self, name):\n        super().__init__(name, 4)\n\n    def drive(self):\n        return f\"{self.name} is driving with {self.wheels} wheels.\"\n\n\nclass Bicycle(Vehicle):\n    def __init__(self, name):\n        super().__init__(name, 2)\n\n    def drive(self):\n        return f\"{self.name} is pedaling along on {self.wheels} wheels.\"\n\n\nclass Boat(Vehicle):\n    def __init__(self, name):\n        super().__init__(name, 0)\n\n    def drive(self):\n        return f\"{self.name} is sailing with {self.wheels} wheels.\"\n\n\nvehicles = [Car(\"Sedan\"), Bicycle(\"Mountain Bike\"), Boat(\"Yacht\")]\n\nfor vehicle in vehicles:\n    if vehicle.wheels > 2:\n        print(vehicle.drive())",
      "explanation": "The code defines a base class 'Vehicle' and three subclasses: 'Car', 'Bicycle', and 'Boat'. Each subclass overrides the 'drive' method with specific behavior. The 'vehicles' list contains instances of these subclasses. The loop iterates over each vehicle in the list and prints the output of the 'drive' method only if the vehicle has more than 2 wheels. The 'Car' class is the only subclass with more than 2 wheels (4 wheels), so only the 'Car' instance ('Sedan') will meet this condition. Therefore, the output will be 'Sedan is driving with 4 wheels.' as it is the only vehicle satisfying the condition in the if statement.",
      "correctAnswer": "Sedan is driving with 4 wheels.",
      "incorrectAnswers": [
        "Mountain Bike is pedaling along on 2 wheels.",
        "Yacht is sailing with 0 wheels.",
        "Sedan is driving with 4 wheels.\nMountain Bike is pedaling along on 2 wheels.",
        "Nothing is printed",
        "ValueError"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "from enum import Enum\n\n\nclass UserRole(Enum):\n    ADMIN = 1\n    MODERATOR = 2\n    USER = 3\n\n\nclass User:\n    def __init__(self, username, role):\n        self.username = username\n        self.role = role\n\n    def __eq__(self, other):\n        return self.role == other.role\n\n\nuser1 = User(\"Alice\", UserRole.ADMIN)\nuser2 = User(\"Bob\", UserRole.MODERATOR)\n\nprint(user1 == user2)",
      "explanation": "The code defines an enumeration 'UserRole' and a class 'User'. The 'User' class has an overridden '__eq__' method that compares two 'User' objects based on their roles. 'user1' is created with the 'UserRole.ADMIN' role, and 'user2' is created with the 'UserRole.MODERATOR' role. When comparing 'user1' and 'user2' using 'user1 == user2', the comparison evaluates to False since 'UserRole.ADMIN' (value 1) is not equal to 'UserRole.MODERATOR' (value 2). Therefore, the output of the print statement is 'False'.",
      "correctAnswer": "False",
      "incorrectAnswers": [
        "True",
        "AttributeError",
        "None",
        "UserRole.ADMIN == UserRole.MODERATOR",
        "ValueError"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "class Foo:\n    def __init__(self, value):\n        self.value = value\n\n\nclass Bar(Foo):\n    def __init__(self, value):\n        self.__init__(value)\n\n    def __repr__(self):\n        return self.value\n\n\nfoo = Bar(6)\nbar = Bar(9)\n\nprint(foo + bar)",
      "explanation": "This code snippet contains a class inheritance error. The 'Bar' class incorrectly calls 'self.__init__(value)' instead of 'super().__init__(value)' for initializing its parent class 'Foo'. This leads to a recursive call to 'Bar.__init__', causing a 'RecursionError'. Additionally, the '__repr__' method in 'Bar' should return a string, not an integer. However, the 'RecursionError' will occur before reaching this point.",
      "correctAnswer": "RecursionError",
      "incorrectAnswers": ["15", "TypeError", "6", "9", "AttributeError"]
    },
    {
      "difficulty": "hard",
      "question": "What will be the output of the following code?",
      "codeSnippet": "x = 5\n\ndef foo():\n    x = 10\n    def bar():\n        global x\n        x = 15\n    bar()\n    print(x)\n\nfoo()\nprint(x)",
      "explanation": "This code involves the use of the 'global' keyword in a nested function 'bar'. When 'bar' is called inside 'foo', it sets the global variable 'x' to 15. However, the 'x' inside 'foo' remains 10 as it is a separate local variable. Therefore, the first print statement inside 'foo' prints 10, and the final print statement outside 'foo' prints the global 'x', which is 15.",
      "correctAnswer": "10\n15",
      "incorrectAnswers": ["15\n15", "10\n10", "15\n5", "5\n15", "5\n5"]
    },
    {
      "difficulty": "hard",
      "question": "What does the following code snippet illustrate?",
      "codeSnippet": "class Counter:\n    def __init__(self):\n        self.count = 0\n\n    def __call__(self):\n        self.count += 1\n        print(f'Count: {self.count}')\n\ncount = Counter()\ncount()\ncount()",
      "explanation": "This code snippet demonstrates the use of the '__call__' magic method in Python. The 'Counter' class has a '__call__' method, allowing instances of this class to be called as functions. Each call to an instance of 'Counter' increments the internal 'count' attribute and prints it. This snippet illustrates creating a callable object in Python.",
      "correctAnswer": "Creating a callable object",
      "incorrectAnswers": [
        "Function overloading",
        "Inheritance in action",
        "Implementation of an iterator",
        "Syntax Error",
        "Demonstration of a static method"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "def outer_func(x):\n    def inner_func(y):\n        return y * x\n    return inner_func\n\nresult = outer_func(5)\nprint(result(2))",
      "explanation": "The 'outer_func' function defines and returns 'inner_func'. When 'outer_func' is called with the argument 5, it returns 'inner_func' with 'x' bound to 5. Calling 'result(2)', which is 'inner_func' with 'y' as 2, returns 2 * 5, which is 10. This code demonstrates the use of closures in Python.",
      "correctAnswer": "10",
      "incorrectAnswers": ["2", "5", "7", "TypeError", "None"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "x = lambda a, b: a * b\nresult = x(5, 3) + x(7, 2)\nprint(result)",
      "explanation": "This code defines a lambda function 'x' that takes two arguments and returns their product. It then calls this function twice with different arguments (5 and 3, then 7 and 2), adding the results of these two calls together. The first call returns 15 (5*3) and the second returns 14 (7*2), so their sum is 29.",
      "correctAnswer": "29",
      "incorrectAnswers": ["15", "14", "35", "10", "21"]
    },
    {
      "difficulty": "hard",
      "question": "What does the following Python code snippet demonstrate?",
      "codeSnippet": "class MyClass:\n    __slots__ = ['name', 'age']\n\nobj = MyClass()\nobj.name = 'Alice'\nobj.age = 30\nobj.address = '123 Main St'",
      "explanation": "This code snippet demonstrates the use of '__slots__' in a Python class to restrict the attributes that instances of the class can have. The 'MyClass' class only allows 'name' and 'age' attributes. Trying to set an 'address' attribute results in an AttributeError, as 'address' is not specified in '__slots__'.",
      "correctAnswer": "AttributeError due to 'address' not being allowed by __slots__",
      "incorrectAnswers": [
        "A MyClass instance with name, age, and address attributes",
        "SyntaxError",
        "TypeError",
        "No output, the code runs successfully",
        "KeyError"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "class CustomInt(int):\n    def __call__(self, val):\n        return CustomInt(self.real + val)\n\nx = CustomInt(3)\ny = x(5)\nprint(y)",
      "explanation": "This code snippet creates a subclass of 'int' named 'CustomInt' with an overridden '__call__' method, allowing instances to be callable. When 'x(5)' is called, it returns a new 'CustomInt' object with the value of 'x' plus 5. With 'x' being 3, 'y' becomes 8.",
      "correctAnswer": "8",
      "incorrectAnswers": ["3", "5", "TypeError", "15", "None"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "import random\n\nrandom.seed(0)\nprint(random.choice('abcdefg'))\nrandom.seed(0)\nprint(random.choice('abcdefg'))",
      "explanation": "The 'random.choice' function selects a random element from a sequence. Setting the random seed with 'random.seed(0)' ensures that the sequence of random choices is repeatable. Therefore, both calls to 'random.choice' will yield the same result since the seed is reset to 0 before each call.",
      "correctAnswer": "The same character is printed twice",
      "incorrectAnswers": [
        "Two different characters is printed",
        "SyntaxError",
        "ValueError",
        "TypeError",
        "AttributeError"
      ]
    },
    {
      "difficulty": "hard",
      "question": "Why would this code throw an error?",
      "codeSnippet": "import threading\n\nthread = threading.Thread(target=print, args=('Hello World',))\nthread.start()\nthread.join()\nprint(thread.is_alive())",
      "explanation": "This code snippet creates and starts a new thread using the 'threading' module from Python's standard library. The thread executes the 'print' function with the argument 'Hello World'. After joining the thread with the main program flow, it checks if the thread is still alive using 'thread.is_alive()'. The code is correct and should not throw any error. It demonstrates basic usage of threads in Python.",
      "correctAnswer": "No error, the code is correct",
      "incorrectAnswers": [
        "TypeError due to incorrect arguments",
        "RuntimeError due to thread misuse",
        "ImportError due to missing module",
        "AttributeError due to invalid method call",
        "SyntaxError"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What library do we need to import to get this code to work?",
      "codeSnippet": "def generate_primes(n):\n    sieve = [True] * n\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            sieve[i*i:n:i] = [False] * len(sieve[i*i:n:i])\n    return [i for i in range(2, n) if sieve[i]]",
      "explanation": "This code snippet is a prime number generator using the Sieve of Eratosthenes algorithm. It does not require any external libraries as it uses basic Python features. The function 'generate_primes' takes a number 'n' and returns a list of prime numbers up to 'n'. It utilizes list comprehensions and basic arithmetic operations, all of which are available in Python's standard library.",
      "correctAnswer": "No additional library is required",
      "incorrectAnswers": ["math", "numpy", "sympy", "itertools", "collections"]
    },
    {
      "difficulty": "hard",
      "question": "Why would this code throw an error?",
      "codeSnippet": "def outer_function():\n    a = 5\n    def inner_function():\n        nonlocal a\n        a += 1\n        return a\n    return inner_function()\na = 0\nprint(outer_function())",
      "explanation": "This code snippet correctly demonstrates the use of the 'nonlocal' keyword in Python, allowing the inner function 'inner_function' to modify the non-global variable 'a' declared in the outer function 'outer_function'. There is no error in this code. The 'nonlocal' keyword is properly used to modify a variable in the nearest enclosing scope that is not global.",
      "correctAnswer": "No error, the code is correct",
      "incorrectAnswers": [
        "SyntaxError due to incorrect use of 'nonlocal'",
        "NameError due to undefined variable 'a'",
        "IndentationError",
        "TypeError due to incorrect return type",
        "ValueError"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What does this code snippet illustrate?",
      "codeSnippet": "def append_to(element, to=[]):\n    to.append(element)\n    return to\n\nprint(append_to(1))\nprint(append_to(2))",
      "explanation": "This code snippet demonstrates a common Python gotcha with default mutable arguments. The default value for the 'to' parameter is set only once when the function is defined, not each time the function is called. This can lead to unexpected behavior, as subsequent calls to the function will use the same list.",
      "correctAnswer": "Mutable default arguments",
      "incorrectAnswers": [
        "Immutable default arguments",
        "SyntaxError",
        "TypeError",
        "Correct and expected behavior",
        "IndexError"
      ]
    },
    {
      "difficulty": "hard",
      "question": "Why do many Python programs include a section similar to 'if __name__ == \"__main__\": main()'?",
      "codeSnippet": "def main():\n    print('Hello, World!')\n\nif __name__ == '__main__':\n    main()",
      "explanation": "The 'if __name__ == \"__main__\":' statement checks whether the Python file is being run as the main program or being imported as a module in another script. If the file is executed as the main program, the condition is true, and the code under this block runs. This allows the code within the block to act as a script when the file is run directly, while preventing it from being executed when the file is imported as a module in another script. This is a common practice for structuring Python code so it can be reusable and self-testing.",
      "correctAnswer": "To check if the file is run as a script or imported as a module",
      "incorrectAnswers": [
        "To improve code execution speed",
        "To ensure compatibility with different Python versions",
        "To import necessary modules automatically",
        "To define the main function of the program",
        "To prevent syntax errors"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What error will be raised when running this code?",
      "codeSnippet": "import random\n\ndef random():\n    print(random.randint(10))\n\nrandom()",
      "explanation": "This code snippet raises an AttributeError because it defines a function named 'random', which shadows the imported 'random' module. When 'random.randint(10)' is called within the function, Python tries to find 'randint' as an attribute of the function 'random' itself, rather than the 'random' module. Since the function 'random' does not have an attribute named 'randint', an AttributeError is raised. This is an example of a name conflict in Python where a local or global name overshadows the name of an imported module.",
      "correctAnswer": "AttributeError",
      "incorrectAnswers": [
        "TypeError",
        "No error is thrown",
        "ImportError",
        "SyntaxError",
        "ValueError"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "class Foo:\n    def __init__(self):\n        return 'Hello'\n\n    def __new__(self):\n        return 'World'\n\n    def __repr__(self):\n        return 'Foo'\n\n\nfoo = Foo()\nprint(foo)",
      "explanation": "In Python, the '__new__' method is responsible for creating a new instance of a class. It has priority over the '__init__' method, which is for initializing the instance. Here, the '__new__' method of class 'Foo' returns the string 'World', so the instance creation of 'Foo' results in 'World' being returned, not a 'Foo' object. The '__init__' method is not called since '__new__' doesn't return an instance of 'Foo'. When 'print(foo)' is executed, it prints the result of '__new__', which is 'World'.",
      "correctAnswer": "'World'",
      "incorrectAnswers": [
        "'Hello'",
        "'Foo'",
        "TypeError",
        "None",
        "RecursionError"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of this Python code snippet?",
      "codeSnippet": "try:\n    raise Exception('Error1')\nexcept Exception as e:\n    try:\n        raise TypeError('Error2')\n    except TypeError as t:\n        print(t, end=\"\")\n    finally:\n        print(e)",
      "explanation": "When the code is executed, 'Exception('Error1')' is raised first and caught by the outer 'except' block. Inside this block, a new 'TypeError('Error2')' is raised and immediately caught by the inner 'except' block. Thus, 'Error2' is printed first. The 'finally' block executes next, printing 'Error1'.",
      "correctAnswer": "Error2Error1",
      "incorrectAnswers": [
        "Error1",
        "Error2",
        "Exception",
        "TypeError",
        "SyntaxError"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of this Python code?",
      "codeSnippet": "def func():\n    try:\n        return 'From try'\n    finally:\n        return 'From finally'\n\nprint(func())",
      "explanation": "In Python, if a 'finally' block is present, it always executes after the 'try' block, even if the 'try' block has a return statement. In this case, 'From finally' is returned from the 'finally' block, overriding the 'From try' return from the 'try' block.",
      "correctAnswer": "From finally",
      "incorrectAnswers": [
        "From try",
        "RecursionError",
        "None",
        "Nothing is printed",
        "SyntaxError"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What does the following fractions-related code output?",
      "codeSnippet": "from fractions import Fraction\n\na = Fraction(5, 10)\nb = Fraction(3, 4)\nc = a * b\nprint(c.denominator)",
      "explanation": "The code multiplies two fractions: 5/10 and 3/4, resulting in the fraction 15/40. This fraction is automatically reduced to 3/8 by the Fraction class. The output is the denominator of the resulting fraction, which is 8.",
      "correctAnswer": "8",
      "incorrectAnswers": ["15", "40", "3", "5", "8/3"]
    },
    {
      "difficulty": "hard",
      "question": "What will be the output of this code involving the fractions module?",
      "codeSnippet": "from fractions import Fraction\n\nx = Fraction(1, 2)\ny = Fraction(1, 3)\nresult = x / y\nprint(result == Fraction(3, 2))",
      "explanation": "The code divides fraction 1/2 by 1/3. The result of this division is 3/2. The final print statement checks if the result is equal to the fraction 3/2, which it is, so the output is True.",
      "correctAnswer": "True",
      "incorrectAnswers": ["False", "1/2", "2/3", "1 1/2", "ValueError"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of this Python code using the operator module?",
      "codeSnippet": "import operator\n\nx = 5\ny = 3\nresult = operator.add(operator.mul(x, y), operator.floordiv(x, y))\nprint(result)",
      "explanation": "The code first multiplies 'x' (5) and 'y' (3) using 'operator.mul', resulting in 15. Then, it performs floor division on 'x' by 'y' using 'operator.floordiv', resulting in 1 (since 5 // 3 is 1). These two results are then added using 'operator.add', giving 15 + 1 = 16.",
      "correctAnswer": "16",
      "incorrectAnswers": ["15", "1", "8", "6", "2"]
    },
    {
      "difficulty": "hard",
      "question": "What does this code snippet from the operator module output?",
      "codeSnippet": "import operator\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nresult = operator.getitem(list1, operator.indexOf(list2, 5))\nprint(result)",
      "explanation": "The code uses 'operator.indexOf' to find the index of the number 5 in 'list2', which is 1. Then, it uses 'operator.getitem' to get the item at index 1 from 'list1', which is 2.",
      "correctAnswer": "2",
      "incorrectAnswers": ["5", "1", "3", "4", "0"]
    },
    {
      "difficulty": "hard",
      "question": "What is the result of this Python code using the operator module?",
      "codeSnippet": "import operator\n\na = {'x': 2, 'y': 3}\nresult = operator.itemgetter('y', 'x')(a)\nprint(result)",
      "explanation": "The 'operator.itemgetter' function creates a callable that fetches item from its operand using the operand’s '__getitem__' method. In this case, it fetches the values of keys 'y' and 'x' from the dictionary 'a', resulting in (3, 2).",
      "correctAnswer": "(3, 2)",
      "incorrectAnswers": [
        "(2, 3)",
        "{'y': 3, 'x': 2}",
        "{'x': 2, 'y': 3}",
        "2",
        "3"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "class Foo:\n    x = 5\n\n    @classmethod\n    def bar(cls):\n        return cls.x + 5\n\nprint(Foo.bar())",
      "explanation": "The method 'bar' in the 'Foo' class is a class method, which means it takes the class itself as the first argument instead of an instance of the class. It accesses the class variable 'x' and returns its value plus 5. Since 'x' is 5, the method returns 10.",
      "correctAnswer": "10",
      "incorrectAnswers": ["5", "15", "TypeError", "0", "None"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "def foo(x):\n    return x * 2\n\ndef bar(y):\n    return foo(y + 2)\n\nprint(bar(3))",
      "explanation": "The function 'bar' calls 'foo' with its argument increased by 2. For 'bar(3)', it calls 'foo' with 5. The function 'foo' then returns this value multiplied by 2, resulting in 10.",
      "correctAnswer": "10",
      "incorrectAnswers": ["6", "8", "5", "TypeError", "None"]
    },
    {
      "difficulty": "hard",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "x = 5\n\ntry:\n    assert x > 10, 'x should be greater than 10'\nexcept AssertionError as e:\n    print(e)",
      "explanation": "The 'assert' statement checks if the condition 'x > 10' is True. If not, it raises an 'AssertionError' with the provided message. Since x is 5, the condition fails and 'AssertionError' is raised with the message 'x should be greater than 10'. The except block catches this error and prints the message.",
      "correctAnswer": "x should be greater than 10",
      "incorrectAnswers": ["5", "10", "e", "TypeError", "Nothing is printed"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "foo = [1, 2, 3, 4, 5]\ndef bar(x):\n    return x**2\n\nresult = map(bar, foo)\nprint(list(result))",
      "explanation": "The 'map' function applies 'bar' to each element in 'foo'. The 'bar' function returns the square of its argument. Therefore, 'result' is an iterator over the squares of the numbers in 'foo'. Converting this iterator to a list results in [1, 4, 9, 16, 25].",
      "correctAnswer": "[1, 4, 9, 16, 25]",
      "incorrectAnswers": [
        "[1, 2, 3, 4, 5]",
        "[2, 4, 6, 8, 10]",
        "[5, 4, 3, 2, 1]",
        "TypeError",
        "None"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "class Foo:\n    def __init__(self, num):\n        self.num = num\n\n    def __add__(self, other):\n        return Foo(self.num + other.num)\n\nx = Foo(3)\ny = Foo(4)\nz = x + y\nprint(z.num)",
      "explanation": "The '__add__' method in the 'Foo' class defines how two instances of 'Foo' should be added. When 'x + y' is executed, it creates a new 'Foo' instance with 'num' as the sum of 'x.num' and 'y.num'. Thus, 'z.num' is 7 (3 + 4).",
      "correctAnswer": "7",
      "incorrectAnswers": ["3", "4", "TypeError", "None", "AttributeError"]
    },
    {
      "difficulty": "hard",
      "question": "What will the following Python code output?",
      "codeSnippet": "x = 0\ntry:\n    x += 1\n    raise ValueError\nexcept ValueError:\n    x += 2\nfinally:\n    x += 3\nprint(x)",
      "explanation": "The code first increments 'x' by 1, then raises a 'ValueError'. The 'except' block catches the error and increments 'x' by 2. The 'finally' block is executed regardless of the exception, adding 3 to 'x'. Hence, 'x' becomes 6 (0 + 1 + 2 + 3).",
      "correctAnswer": "6",
      "incorrectAnswers": ["1", "3", "4", "5", "7"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "foo = lambda x, y: x * y\nbar = lambda x: foo(x, x)\n\nprint(bar(5))",
      "explanation": "The lambda function 'foo' multiplies its two arguments. 'bar' is another lambda function that calls 'foo', passing its argument 'x' as both parameters to 'foo'. Thus, 'bar(5)' calls 'foo(5, 5)', which results in 25.",
      "correctAnswer": "25",
      "incorrectAnswers": ["10", "5", "0", "TypeError", "None"]
    },
    {
      "difficulty": "hard",
      "question": "What does the following Python code print?",
      "codeSnippet": "foo = [1, 3, 5, 7]\nprint(sum(filter(lambda x: x % 2 == 0, foo)))",
      "explanation": "The 'filter' function applies a lambda function to each element in 'foo', keeping only those elements for which the lambda function returns True. Since the lambda function checks if elements are even, and all elements in 'foo' are odd, the filter results in an empty list. The sum of an empty list is 0.",
      "correctAnswer": "0",
      "incorrectAnswers": ["16", "1", "TypeError", "None", "9"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "def foo(x):\n    if x > 0:\n        return x + foo(x - 1)\n    else:\n        return 0\n\nprint(foo(4))",
      "explanation": "The function 'foo' is a recursive function. It calls itself, decreasing the argument 'x' by 1 each time until 'x' is 0. For 'foo(4)', it returns 4 + 3 + 2 + 1 + 0, which is 10.",
      "correctAnswer": "10",
      "incorrectAnswers": ["4", "5", "24", "0", "TypeError"]
    },
    {
      "difficulty": "hard",
      "question": "What will be printed when the following code is executed?",
      "codeSnippet": "class Foo:\n    def __str__(self):\n        return 'Foo'\n\nclass Bar(Foo):\n    def __str__(self):\n        return 'Bar'\n\nx = Foo()\ny = Bar()\nprint(x, y)",
      "explanation": "The 'Foo' class defines a '__str__' method that returns 'Foo', and 'Bar' (subclass of 'Foo') overrides this method to return 'Bar'. When instances of 'Foo' and 'Bar' are printed, their respective '__str__' methods are called, printing 'Foo Bar'.",
      "correctAnswer": "Foo Bar",
      "incorrectAnswers": ["Bar Foo", "Foo", "Bar", "TypeError", "None"]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "x = [1, 2, 3]\ndef foo(y):\n    return [i * 2 for i in y]\n\nx = foo(x)\nprint(x)",
      "explanation": "The function 'foo' takes a list 'y' and returns a new list where each element is doubled. The list 'x' is passed to 'foo', and the resulting list [2, 4, 6] is assigned back to 'x'.",
      "correctAnswer": "[2, 4, 6]",
      "incorrectAnswers": [
        "[1, 2, 3]",
        "[3, 6, 9]",
        "[1, 4, 9]",
        "TypeError",
        "None"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What will the following Python code output?",
      "codeSnippet": "x = {'a': 1, 'b': 2, 'c': 3}\ndef foo(k, v):\n    x[k] = v\n\nfoo('b', 5)\nprint(x)",
      "explanation": "The function 'foo' modifies the dictionary 'x' by setting the value of key 'k' to 'v'. Calling 'foo' with 'b' and 5 updates the value of 'b' in 'x' to 5. The final dictionary is {'a': 1, 'b': 5, 'c': 3}.",
      "correctAnswer": "{'a': 1, 'b': 5, 'c': 3}",
      "incorrectAnswers": [
        "{'a': 1, 'b': 2, 'c': 3}",
        "{'a': 1, 'b': 2, 'c': 5}",
        "{'a': 5, 'b': 2, 'c': 3}",
        "TypeError",
        "None"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What does the following Python code print?",
      "codeSnippet": "foo = (lambda x, y: x * y)(3, 5)\nprint(foo)",
      "explanation": "The lambda function takes two arguments 'x' and 'y' and returns their product. It is immediately invoked with 3 and 5 as arguments. The product of 3 and 5 is 15, which is printed.",
      "correctAnswer": "15",
      "incorrectAnswers": ["8", "3", "5", "TypeError", "None"]
    },
    {
      "difficulty": "hard",
      "question": "What will the following Python code output?",
      "codeSnippet": "def foo():\n    global x\n    x = 10\nx = 5\nfoo()\nprint(x)",
      "explanation": "The function 'foo' declares 'x' as a global variable and sets it to 10. When 'foo' is called, it changes the global variable 'x' from 5 to 10. Therefore, when 'x' is printed, it is 10.",
      "correctAnswer": "10",
      "incorrectAnswers": ["5", "0", "None", "TypeError", "15"]
    },
    {
      "difficulty": "hard",
      "question": "What will the following Python code output?",
      "codeSnippet": "x = [1, 2, 3, 4, 5]\nprint(x[1:3])",
      "explanation": "The slice operation 'x[1:3]' extracts a portion of the list 'x' from index 1 to index 2 (exclusive of index 3). The resulting sublist is [2, 3].",
      "correctAnswer": "[2, 3]",
      "incorrectAnswers": [
        "[1, 2, 3]",
        "[3, 4]",
        "[2, 3, 4]",
        "TypeError",
        "IndexError"
      ]
    },
    {
      "difficulty": "hard",
      "question": "What is the output of the following Python code?",
      "codeSnippet": "def foo(x):\n    return x > 10\n\nbar = [foo(i) for i in range(15)]\nprint(bar.count(True))",
      "explanation": "The list comprehension creates a list 'bar' by applying the function 'foo' to each number in the range 0 to 14. The function 'foo' returns True if the number is greater than 10. 'bar.count(True)' counts how many times True appears in 'bar'. There are 4 numbers greater than 10 in the range (11, 12, 13, 14).",
      "correctAnswer": "4",
      "incorrectAnswers": ["3", "5", "10", "False", "TypeError"]
    }
  ],
  "expert": [
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "def foo(x, y):\n    return lambda z: x(y, z)\n\n\ndef bar(x, y):\n    return lambda z: x(y(z))\n\nx = foo(filter, lambda x: x % 2 == 0)\ny = foo(map, lambda x: x ** 2)\nz = bar(x, y)\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(list(z(data)))",
      "explanation": "The function 'foo' returns a lambda that applies a function 'x' to the result of applying another function 'y'. 'x' in 'foo(filter, lambda x: x % 2 == 0)' applies 'filter' to a lambda function checking for even numbers. 'y' in 'foo(map, lambda x: x ** 2)' applies 'map' to a lambda function squaring numbers. 'z' in 'bar(x, y)' applies 'x' to the result of 'y'. Thus, 'z(data)' filters even numbers and squares them, resulting in [4, 16, 36, 64].",
      "correctAnswer": "[4, 16, 36, 64]",
      "incorrectAnswers": [
        "[1, 4, 9, 16, 25, 36, 49, 64, 81]",
        "Error",
        "[1, 3, 5, 7, 9]",
        "[2, 4, 6, 8]",
        "[]"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of the following code snippet?",
      "codeSnippet": "data = [1, 2, 3, 4, 5]\ntransformed = list(map(lambda x: x**2, [y for y in data if y % 2 == 0]))\nresult = sum(filter(lambda z: z > 10 and z < 20, transformed))\nprint(result)",
      "explanation": "The code first filters even numbers from 'data' ([2, 4]), then squares each number (4, 16) using a map function. The resulting list 'transformed' is [4, 16]. Then, the 'filter' function selects elements greater than 10 and less than 20 from 'transformed'. The only number satisfying this condition is 16. Finally, 'sum' adds up the elements of the filtered list, resulting in 16. Therefore, the output is 16.",
      "correctAnswer": "16",
      "incorrectAnswers": ["20", "30", "14", "10", "0"]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of the following code snippet?",
      "codeSnippet": "class Foo:\n    def __init__(self, number):\n        self.number = number\n\n    def __call__(self, value):\n        if value == 0:\n            return self.number\n        else:\n            return Foo(self.number + value)\n\n\ndef bar(obj, limit):\n    if limit <= 0:\n        return obj(0)\n    else:\n        return bar(obj(limit), limit - 1)\n\n\nfoo = Foo(5)\nresult = bar(foo, 3)\nprint(result)",
      "explanation": "The 'Foo' class defines a callable object with the '__call__' method. Initially, 'foo' is an instance of 'Foo' with 'number' 5. 'bar' is a recursive function, and each recursive call reduces 'limit' by 1. On each call, 'obj(limit)' creates a new 'Foo' instance with 'number' incremented by 'limit'. At 'limit' 3, 2, and 1, the numbers added are 3, 5 (3+2), and 8 (5+3), respectively. Finally, when 'limit' becomes 0, 'obj(0)' returns the current 'number', which is 11. Thus, the output is 11.",
      "correctAnswer": "11",
      "incorrectAnswers": ["15", "8", "TypeError", "RecursionError", "10"]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of the following code snippet?",
      "codeSnippet": "foo = {j: sum([i for i in range(j)]) for j in range(5)}\n\nfor i, (k, v) in enumerate(foo.items()):\n    continue\n\nprint(i, k, v)",
      "explanation": "The dictionary comprehension creates 'foo' with keys from 0 to 4 and values as the sum of numbers from 0 to one less than the key. The final dictionary is {0: 0, 1: 0, 2: 1, 3: 3, 4: 6}. The loop iterates over each item, but 'continue' does nothing meaningful here. After the loop, 'i' is 4 (last index), 'k' is 4 (last key), and 'v' is 6 (last value). Therefore, the output is [4, 4, 6].",
      "correctAnswer": "[4, 4, 6]",
      "incorrectAnswers": [
        "[3, 3, 3]",
        "[2, 1, 1]",
        "SyntaxError",
        "ValueError",
        "[1, 2, 1]"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What will be the behavior of the following code snippet?",
      "codeSnippet": "import random\n\ndef foo():\n    num = 0\n    while num:\n        yield num\n        num += int(random.choice([0, 0, 0, 1]) * 0)\n    else:\n        for _ in range(3):\n            num = (num + 1) % 2\n\n\nfor i in foo():\n    print(i)",
      "explanation": "The function 'foo' is a generator with a while loop that only executes if 'num' is non-zero. Since 'num' is initialized to 0 and the expression 'int(random.choice([0, 0, 0, 1]) * 0)' always evaluates to 0, the while loop never executes. The else block modifies 'num' but does not yield any values. As a result, the for loop that iterates over 'foo()' does not print anything. Therefore, nothing gets printed.",
      "correctAnswer": "Nothing gets printed",
      "incorrectAnswers": [
        "It prints random values forever",
        "It prints random values until the random value is 0",
        "It prints a sequence of 1s three times",
        "It prints a sequence of 0s three times",
        "It prints '1, 0, 1'"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the function 'foo' when called with the arguments 1 and 3?",
      "codeSnippet": "def foo(x, y):\n    return (x & y) << 2\n\nprint(foo(1, 3))",
      "explanation": "The function 'foo' performs a bitwise AND operation on the inputs 'x' and 'y' (1 and 3 respectively). The result of 1 & 3 is 1 (both in binary: 01 & 11). This result is then left-shifted by 2 bits, which turns 1 (binary 01) into 4 (binary 0100). Therefore, the output is 4.",
      "correctAnswer": "4",
      "incorrectAnswers": ["0", "2", "8", "12", "16"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the list comprehension combined with the lambda function in the given Python code?",
      "codeSnippet": "foo = lambda x: not (x & 1)\nbar = [i for i in range(10) if foo(i)]\n\nprint(bar)",
      "explanation": "The lambda function 'foo' returns True for even numbers. It uses a bitwise AND operation with 1 to check if the least significant bit is 0 (even). The list comprehension generates a list of numbers from 0 to 9, including only those for which 'foo' returns True. As 'foo' returns True for even numbers, the output is [0, 2, 4, 6, 8].",
      "correctAnswer": "[0, 2, 4, 6, 8]",
      "incorrectAnswers": [
        "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "[1, 3, 5, 7, 9]",
        "[2, 4, 6, 8]",
        "[0, 1, 3, 5, 7, 9]",
        "[]"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What is the time complexity of the following code in Big O notation, based on the variable 'n'?",
      "codeSnippet": "n = 153\ni = 0\n\nwhile i < n:\n    j = 1\n    while j < n:\n        j *= 2\n    i += 1",
      "explanation": "The code has two nested loops. The outer loop runs 'n' times as it increments 'i' from 0 to 'n'. The inner loop is a bit trickier; it doubles 'j' each time until 'j' is greater than or equal to 'n'. This doubling means the inner loop runs in O(log n) time, as doubling a number a certain number of times to reach 'n' is logarithmic in nature. Therefore, the overall time complexity of the nested loops is O(n) for the outer loop multiplied by O(log n) for the inner loop, resulting in O(n log n).",
      "correctAnswer": "O(n log n)",
      "incorrectAnswers": ["O(n)", "O(log n)", "O(n^2)", "O(2^n)", "O(log^2 n)"]
    },
    {
      "difficulty": "expert",
      "question": "What is the time complexity of the following code in Big O notation, based on the variable 'n'?",
      "codeSnippet": "def foo(num):\n    for i in range(num):\n        if num % 2 == 0:\n            return True\n        else:\n            return False\n\nfor i in range(n):\n    if (foo(i)):\n        break\n    else:\n        print(i)",
      "explanation": "Despite the appearance of nested loops, the time complexity of this code is O(1). The function 'foo(num)' checks whether 'num' is even or odd and returns immediately in the first iteration of its loop. Therefore, its time complexity is constant. In the main loop, 'foo(i)' will return 'True' when 'i' is even, causing an immediate break on the first even number (i.e., 'i=0'). Thus, the main loop does not iterate based on 'n' and has a constant time complexity. Overall, the time complexity of the entire code is O(1), as it does not depend on the size of 'n'.",
      "correctAnswer": "O(1)",
      "incorrectAnswers": ["O(n^2)", "O(n log n)", "O(log n)", "O(2^n)", "O(n)"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet:",
      "codeSnippet": "import itertools\n\nclass Foo:\n    def __init__(self, limit):\n        self.limit = limit\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.limit <= 0:\n            raise StopIteration\n        self.limit -= 1\n        return 2 ** self.limit\n\n\ndef bar(z):\n    y = (x for x in z if x % 2 == 0)\n    return sum(itertools.islice(y, 0, 3))\n\nprint(bar(Foo(5)))",
      "explanation": "The 'Foo' class is an iterator that generates powers of 2, decreasing the exponent in each iteration. When 'bar(Foo(5))' is called, it generates the first 5 powers of 2 in descending order: 16, 8, 4, 2, 1. The generator expression in 'bar' filters these to keep only even numbers. The 'itertools.islice' function then slices the first 3 of these even numbers, which are 16, 8, and 4. Summing these numbers (16 + 8 + 4) results in 28. Thus, the output of the code is 28.",
      "correctAnswer": "28",
      "incorrectAnswers": ["16", "32", "24", "20", "30"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet when executed?",
      "codeSnippet": "def foo(x):\n    def wrapper():\n        print(x()(bar()(2)))\n    return wrapper\n\n\ndef bar():\n    return lambda x: x - 3\n\n\n@foo\ndef foo_bar():\n    return lambda x: x*x\n\n\nfoo_bar()",
      "explanation": "This code uses a decorator ('foo') applied to the 'foo_bar' function. When 'foo_bar()' is called, it actually calls the 'wrapper' function defined inside 'foo'. The 'wrapper' function calls 'x()', which is 'foo_bar()', returning a lambda function 'lambda x: x*x'. This lambda is called with the result of 'bar()(2)', where 'bar()' returns another lambda 'lambda x: x - 3', which is then called with 2, resulting in -1. Thus, the final call is the square of -1, which is 1. Therefore, the output is 1.",
      "correctAnswer": "1",
      "incorrectAnswers": ["2", "3", "4", "Syntax Error", "Nothing is printed"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet:",
      "codeSnippet": "def foo(num):\n    def bar(x):\n        return lambda y: lambda z: z + y - x\n    return lambda x: lambda y: bar(num + x - y)\n\nprint(foo(0)(1)(2)(3)(4))",
      "explanation": "This code snippet features a complex and unconventional use of nested lambda functions and closures. The nested lambda functions and the sequence of calls make the code difficult to follow and understand. It is designed to be intentionally challenging to interpret, focusing more on testing the understanding of Python's syntax and function behaviors in a complex scenario rather than practical application.",
      "correctAnswer": "8",
      "incorrectAnswers": [
        "None",
        "Address to function",
        "Syntax Error",
        "5",
        "2"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "import asyncio\n\nasync def foo(x, y):\n    await asyncio.sleep(x / 1000)\n    y.append(x)\n\nasync def bar(x, y=[]):\n    tasks = [foo(value, y) for value in x]\n    await asyncio.gather(*tasks)\n    return y\n\ntry:\n    result = asyncio.run(bar([163, 99, 12]))\nfinally:\n    result = asyncio.run(bar([199, 1, 64]))\n\nprint(result)",
      "explanation": "This code snippet involves asynchronous programming with Python's asyncio module. The 'bar' function creates and runs asynchronous tasks that sleep for a duration proportional to their input value and then append this value to a list. Due to the nature of asynchronous programming and the 'await asyncio.sleep(x / 1000)' call, the order in which values are appended to the list depends on their sleep duration. Shorter durations will result in earlier completion and appending. The final result is likely to be ordered by duration (shortest to longest sleep times), but this is not guaranteed due to potential variations in execution timing. Therefore, the output is probably [12, 99, 163, 1, 64, 199], but it's not sure.",
      "correctAnswer": "Probably [12, 99, 163, 1, 64, 199] but it's not sure",
      "incorrectAnswers": [
        "Probably [163, 99, 12, 199, 1, 64] but it's not sure",
        "[1, 12, 64, 99, 163, 199]",
        "[199, 1, 64] in a random order",
        "An error occurs",
        "An empty list"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "class Foo:\n    def __init__(self):\n        self.value = 0\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        return True\n\n\nwith Foo() as data:\n    print(1 / data.value)",
      "explanation": "In this code, the class 'Foo' is defined as a context manager using the '__enter__' and '__exit__' magic methods. When entering the 'with' statement, '__enter__' is called, returning the 'Foo' instance with 'value' set to 0. Inside the 'with' block, attempting to perform '1 / data.value' would normally raise a 'ZeroDivisionError', as 'data.value' is 0. However, the '__exit__' method of 'Foo' returns 'True', which tells Python to suppress the exception. As a result, the exception is caught and handled within the '__exit__' method, and no output is printed. This is a classic example of using context managers to control the flow of exceptions in Python.",
      "correctAnswer": "Nothing is printed",
      "incorrectAnswers": [
        "0",
        "ZeroDivision Error",
        "None",
        "Syntax Error",
        "1"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "import re\n\nfoo = \"ID123-456\"\nregex_pattern = (\n    r\"(ID\\d{2})\"\n    r\"(\\d{1,3})-\"\n    r\"(\\d{3})\"\n)\nbar = re.match(regex_pattern, foo)\nprint(len(bar.groups()) if bar else \"No match found\")",
      "explanation": "The regular expression pattern used in the code snippet is designed to match a specific format. It consists of three groups: '(ID\\d{2})' matches 'ID' followed by exactly two digits, '(\\d{1,3})-' matches 1 to 3 digits followed by a hyphen, and '(\\d{3})' matches exactly three digits. In the string 'foo', 'ID123-456', this pattern matches completely. The 're.match' function returns a match object containing these three groups. Therefore, 'len(bar.groups())', which counts the number of groups in the match, returns 3.",
      "correctAnswer": "3",
      "incorrectAnswers": ["2", "4", "5", "No match found", "SyntaxError"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "import re\n\nfoo = \"2023/04/01, Event: Lunar Eclipse\"\nregex_pattern = (\n    r\"(\\d{4}/\\d{2}/\\d{2}), \"\n    r\"Event: (\\w+ \\w+)\"\n)\nbar = re.search(regex_pattern, foo)\nprint(bar.groups()[0][0] if bar else \"No match found\")",
      "explanation": "The regular expression pattern is designed to capture two groups: the date in 'YYYY/MM/DD' format and the event name consisting of two words. The pattern '(\\d{4}/\\d{2}/\\d{2})' captures the date, and '(\\w+ \\w+)' captures the event name. The 're.search' function searches for this pattern in the string 'foo'. Upon finding a match, 'bar.groups()[0][0]' accesses the first character of the first captured group (the date), which is '2' from '2023'. If no match is found, it would print 'No match found'. However, in this case, it successfully finds a match and thus prints '2'.",
      "correctAnswer": "2",
      "incorrectAnswers": ["RecursionError", "3", "4", "0", "No match found"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "class Number:\n    def __init__(self, value):\n        self.value = value\n\n    def __gt__(self, other):\n        return self.value < other\n\n    def __lt__(self, other):\n        return self.value > other\n\n    def __add__(self, other):\n        return self.value - other.value\n\n    def __sub__(self, other):\n        return self.value + other.value\n\n    def __mul__(self, other):\n        return self.value // other.value\n\n    def __truediv__(self, other):\n        return self.value * other.value\n\n\nfoo = Number(5)\nbar = Number(3)\n\n\nprint(foo - bar * 5)",
      "explanation": "The 'Number' class overrides arithmetic operators, but the methods do not follow conventional arithmetic rules. The '__sub__' method is designed to add, '__add__' subtracts, '__mul__' performs floor division, and '__truediv__' multiplies. In the expression 'foo - bar * 5', 'bar * 5' leads to an error because '5' is an integer, not a 'Number' instance, and the '__mul__' method expects 'other' to be a 'Number' instance with a 'value' attribute. Since the integer '5' does not have a 'value' attribute, this results in an 'AttributeError'.",
      "correctAnswer": "AttributeError",
      "incorrectAnswers": ["5", "8", "15", "TypeError", "0"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet involving URL parsing?",
      "codeSnippet": "from urllib import parse\n\nurl = \"http://www.example.com/?name=John&age=30\"\nfoo = parse.urlparse(url)\nbar = parse.parse_qs(foo.query)\nprint(bar.get(\"example\"))",
      "explanation": "The code first parses the URL using 'parse.urlparse', which splits the URL into its components. 'foo.query' contains the query component of the URL, 'name=John&age=30'. This string is then parsed using 'parse.parse_qs', which returns a dictionary where the keys are the query parameters, and the values are lists of their values. In this case, 'bar' is a dictionary with keys 'name' and 'age'. The 'get' method is used to retrieve the value for the key 'example' from 'bar'. Since 'example' is not a parameter in the URL's query string, the method returns 'None'. Therefore, the output of the code is 'None'. This question tests understanding of URL parsing and query string processing in Python.",
      "correctAnswer": "None",
      "incorrectAnswers": [
        "\"John\"",
        "\"30\"",
        "['John']",
        "['30']",
        "An empty list"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What type of output is generated by the following Python code snippet?",
      "codeSnippet": "import datetime\n\ndef foo(x):\n    y = datetime.datetime.strptime(x, \"%Y-%m-%d\")\n    return y.strftime(\"%A\")\n\nbar = \"2024-01-01\"\nresult = foo(bar)\nprint(result)",
      "explanation": "The function 'foo' takes a string representing a date in the format 'YYYY-MM-DD' and converts it into a datetime object using 'datetime.datetime.strptime'. It then formats this datetime object to a string representing the name of the day of the week using 'strftime(\"%A\")'. When 'foo' is called with the argument '2024-01-01', it converts this date to a datetime object and then to a string representing the name of the day of the week for January 1, 2024. Therefore, the output of this code will be the name of the day of the week corresponding to the date January 1, 2024.",
      "correctAnswer": "The name of the day of the week for the given date",
      "incorrectAnswers": [
        "A numerical representation of the date",
        "The name of the month in the given date",
        "A timestamp in Unix format",
        "A formatted string showing the date and time",
        "An error message"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What is the type of the first element in the list 'bar' after executing the following Python code snippet?",
      "codeSnippet": "import functools\n\ndef foo(x, y):\n    return x[1] - y[1]\n\ndata = [(\"apple\", 3), (\"banana\", 2), (\"cherry\", 5)]\nbar = sorted(data, key=functools.cmp_to_key(foo))\n\nprint(type(bar[0]))",
      "explanation": "The code sorts a list of tuples 'data' based on a custom comparison function 'foo'. The 'foo' function compares the second element of each tuple. 'functools.cmp_to_key' converts the comparison function to a key function. After sorting, 'bar' is a list of tuples sorted by the second element of each tuple in ascending order. Since 'bar' is a list of tuples, the type of the first element of 'bar' (which is a tuple itself) is '<class 'tuple'>'. Thus, 'print(type(bar[0]))' outputs '<class 'tuple'>'.",
      "correctAnswer": "<class 'tuple'>",
      "incorrectAnswers": [
        "<class 'str'>",
        "<class 'list'>",
        "<class 'int'>",
        "<class 'dict'>",
        "<class 'set'>"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print((9 ^ 5) | 3)",
      "explanation": "The expression involves bitwise XOR (^) and OR (|) operators. First, it computes the XOR of 9 and 5. In binary, 9 is 1001 and 5 is 0101; XORing these gives 1100, which is 12 in decimal. Then, it computes the OR of this result with 3 (binary 0011), which gives 1111. In decimal, 1111 is 15. Therefore, the output of the code is 15.",
      "correctAnswer": "15",
      "incorrectAnswers": ["12", "14", "16", "10", "13"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(14 & 7)",
      "explanation": "The code performs a bitwise AND operation between the numbers 14 and 7. In binary, 14 is 1110 and 7 is 0111. The bitwise AND operation compares each corresponding bit of these binary representations and returns 1 if both bits are 1, otherwise, it returns 0. For 1110 AND 0111, the result is 0110, which is 6 in decimal. Therefore, the output of the code is 6.",
      "correctAnswer": "6",
      "incorrectAnswers": ["4", "5", "7", "8", "9"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(12 >> 2 | 3 << 1)",
      "explanation": "This code snippet uses both the right shift (>>) and left shift (<<) bitwise operations, followed by a bitwise OR (|). The expression '12 >> 2' right shifts the binary representation of 12 (1100) by two places, resulting in 3 (11 in binary). The expression '3 << 1' left shifts the binary representation of 3 (11) by one place, resulting in 6 (110 in binary). The bitwise OR of these two results, 3 (11) and 6 (110), is 7 (111 in binary). Therefore, the output of the code is 7.",
      "correctAnswer": "7",
      "incorrectAnswers": ["5", "6", "8", "9", "10"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(~4 & 6)",
      "explanation": "The code performs a bitwise NOT operation (~) on the number 4, followed by a bitwise AND operation (&) with the number 6. The bitwise NOT operation inverts each bit, turning 4 (binary 0100) into -5 (binary ...11111011 in two's complement representation). The bitwise AND operation is then performed between -5 (binary ...11111011) and 6 (binary 0110), resulting in 2 (binary 0010). Therefore, the output of the code is 2.",
      "correctAnswer": "2",
      "incorrectAnswers": ["0", "1", "3", "4", "5"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "print(8 >> 1 ^ 5)",
      "explanation": "The code snippet executes a right shift (>>) operation on the number 8 by 1 bit, resulting in 4 (as 8 in binary is 1000, which becomes 0100 after shifting right by 1 bit). It then performs a bitwise XOR (^) operation with the number 5 (binary 0101). The XOR operation compares each corresponding bit of 4 (binary 0100) and 5 (binary 0101) and returns 1 if the bits are different, otherwise, it returns 0. The result of XORing 0100 and 0101 is 0001, which is 1 in decimal. Therefore, the output of the code is 1.",
      "correctAnswer": "1",
      "incorrectAnswers": ["0", "2", "3", "4", "5"]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "import heapq\n\nfoo = [1, 5, 22, 21, 19, 7]\nbar = heapq.heapify(foo)\nprint(foo[0])",
      "explanation": "The 'heapq.heapify' function transforms the list 'foo' into a min-heap, in-place, resulting in the smallest element being moved to the index 0. However, the function itself returns 'None' and does not affect the assignment of 'bar'. Thus, the print statement outputs the smallest element in the heapified list, which is 1.",
      "correctAnswer": "1",
      "incorrectAnswers": ["5", "7", "19", "None", "22"]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "import heapq\n\nfoo = []\n\nheapq.heappush(foo, 3)\nheapq.heappush(foo, 8)\nheapq.heappush(foo, 4)\nheapq.heappush(foo, 7)\nheapq.heappush(foo, 5)\n\nprint(foo[0])",
      "explanation": "The code uses the 'heapq' module to create a min-heap. The 'heappush' function is used to add elements to the heap. The nature of a min-heap is such that the smallest element is always at the root, which is the first element in the list representation of the heap. Since '3' is the smallest number added to the heap, it remains at the root after all insertions. Hence, 'foo[0]' prints '3', the smallest element in the heap.",
      "correctAnswer": "3",
      "incorrectAnswers": ["4", "5", "7", "8", "None of these"]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "import heapq\n\nfoo = []\n\nheapq.heappush(foo, -3)\nheapq.heappush(foo, -1)\nheapq.heappush(foo, -4)\nheapq.heappush(foo, -1)\nheapq.heappush(foo, -5)\n\nprint(-foo[0])",
      "explanation": "This code constructs a min-heap using negative values. In a min-heap, the smallest element is placed at the root (index 0). By pushing negative values, the largest original value (in this case, -5) becomes the smallest in terms of negative magnitude and thus is placed at the root. When we print '-foo[0]', we are negating the smallest (most negative) value in the heap, which is -5. Thus, the output is 5, the largest number in the original set.",
      "correctAnswer": "5",
      "incorrectAnswers": ["3", "-3", "1", "-1", "-5"]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "from queue import PriorityQueue\n\npq = PriorityQueue()\n\npq.put((3, 'three'))\n pq.put((1, 'one'))\n pq.put((4, 'four'))\n pq.put((2, 'two'))\n pq.put((5, 'five'))\n\nprint(pq.get())",
      "explanation": "The PriorityQueue class in Python implements a min-heap queue, where items are sorted in ascending order based on the first element of the tuple. When 'pq.get()' is called, it retrieves and removes the smallest item from the queue. Since the tuple (1, 'one') has the smallest first element, it is the first item to be retrieved from the priority queue, resulting in the output (1, 'one').",
      "correctAnswer": "(1, 'one')",
      "incorrectAnswers": ["1", "'five'", "5", "(5, 'five')", "None"]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "from itertools import compress\n\nfoo = list(compress(range(8), range(4)))\n\nprint(sum(foo))",
      "explanation": "The 'compress' function from the itertools module filters elements from the first iterable (range(8)) using the truthiness of each element in the second iterable (range(4)). Since 'range(4)' yields [0, 1, 2, 3], the truthiness of these values is [False, True, True, True]. Therefore, 'compress' selects the first four elements from 'range(8)' corresponding to the truthiness values, resulting in [1, 2, 3]. The sum of [1, 2, 3] is 6.",
      "correctAnswer": "6",
      "incorrectAnswers": ["10", "14", "21", "0", "3"]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "from itertools import combinations\n\nfoo = list(combinations(range(5), 1))\n\nprint(len(foo))",
      "explanation": "This code snippet uses the 'combinations' function from the 'itertools' module to generate all possible combinations of length 1 from the range 0 to 4 (inclusive). The 'range(5)' generates a sequence of numbers from 0 to 4. The 'combinations' function then creates a combination of these numbers taken 1 at a time. There are 5 such combinations: (0,), (1,), (2,), (3,), and (4,). Converting these combinations to a list and then taking the length of this list results in the output 5.",
      "correctAnswer": "5",
      "incorrectAnswers": ["1", "10", "ValueError", "TypeError", "SyntaxError"]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "from collections import ChainMap\n\nfoo = ChainMap(\"hello\", \"world\")\nfoo.get(\"world\")",
      "explanation": "This code attempts to create a ChainMap object with two strings, 'hello' and 'world'. However, ChainMap expects dictionaries or mappings as its arguments, not strings. Passing strings instead of dictionaries leads to an error. When 'foo.get(\"world\")' is called, it results in a TypeError because the ChainMap object does not have the mappings as expected. The TypeError is raised because the ChainMap object cannot interpret the strings 'hello' and 'world' as mappings.",
      "correctAnswer": "TypeError",
      "incorrectAnswers": ["None", "'world'", "'hello'", "KeyError", "0"]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "class A:\n    def __init__(self, x):\n        self.x = x\n\n    def __str__(self):\n        return f\"A({self.x})\"\n\n\nclass B(A):\n    def __init__(self, y):\n        super().__init__(y)\n\n    def __str__(self):\n        return f\"B({self.x})\"\n\n\nclass C(A):\n    def __init__(self, z):\n        super().__init__(z)\n\n    def __str__(self):\n        return f\"C({self.x})\"\n\n\ndef foo(obj):\n    return obj.x\n\n\nbar = [B(1), C(2), B(3), C(4)]\nx = max(bar, key=foo)\ny = [obj for obj in bar if foo(obj) == foo(x)]\nz = x if len(y) % 2 == 0 else max(y, key=foo)\n\nprint(z)",
      "explanation": "The code defines three classes, A, B, and C, each with a custom string representation. The function 'foo' returns the 'x' attribute of an object. 'bar' is a list of B and C objects with different values for 'x'. 'max(bar, key=foo)' finds the object in 'bar' with the maximum 'x' value, which is 'C(4)'. The list comprehension creates 'y', a list of objects from 'bar' whose 'x' value equals that of 'x' (in this case, only 'C(4)'). As 'y' contains only one item, its length is not even, so 'max(y, key=foo)' is evaluated, which is again 'C(4)'. Therefore, 'z' is 'C(4)', and this is what gets printed.",
      "correctAnswer": "C(4)",
      "incorrectAnswers": ["B(3)", "C(2)", "B(1)", "A(4)", "Error"]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "from abc import ABC, abstractmethod\nimport math\n\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * self.radius * self.radius\n\n\nclass Rectangle(Shape):\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width\n\n\nfoo = Shape()\nprint(foo.area())",
      "explanation": "The code defines an abstract class 'Shape' with an abstract method 'area'. Abstract classes in Python, created using the 'ABC' module, cannot be instantiated directly. Attempting to create an instance of the 'Shape' class directly using 'foo = Shape()' will result in a TypeError because abstract classes are meant to be subclassed, and their abstract methods are expected to be implemented in subclasses. Since 'Shape' is abstract and 'area' is an abstract method, the instantiation of 'Shape' is not allowed and results in a TypeError.",
      "correctAnswer": "TypeError",
      "incorrectAnswers": [
        "0",
        "None",
        "An empty string",
        "Nothing is printed",
        "NotImplementedError"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "from abc import ABC, abstractmethod\nimport math\n\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\n    def randomize(self, x):\n        return x % 4\n\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * self.radius * self.radius\n\n    def randomize(self, x):\n        return x % 5\n\n\nclass Rectangle(Shape):\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        new_length = super().randomize(self.length)\n        new_width = self.randomize(self.width)\n        return new_length * new_width\n\n    def randomize(self, x):\n        return x % 2\n\n\nfoo = Rectangle(5, 7)\nprint(foo.area())",
      "explanation": "The code defines an abstract class 'Shape' with an abstract method 'area' and a method 'randomize'. 'Circle' and 'Rectangle' are subclasses of 'Shape' and they both override the 'randomize' method. In 'Rectangle', the 'area' method uses the superclass's 'randomize' method to modify 'length' and the subclass's own 'randomize' method to modify 'width'. The 'new_length' is calculated as '5 % 4', which is 1, and the 'new_width' is calculated as '7 % 2', which is also 1. Therefore, the area of the rectangle, calculated as 'new_length * new_width', is '1 * 1', resulting in an output of 1.",
      "correctAnswer": "1",
      "incorrectAnswers": ["0", "2", "5", "7", "35"]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "class Number:\n    def __init__(self, value):\n        self.value = value\n\n    def __add__(self, other):\n        return Number(self.value - other.value)\n\n    def __sub__(self, other):\n        return Number(self.value + other.value)\n\n    def __eq__(self, other):\n        return self.value * other.value\n\n\nfoo = Number(2)\nbar = Number(3)\n\nprint(foo + bar == bar - foo)",
      "explanation": "In this code, the 'Number' class overrides the '__add__', '__sub__', and '__eq__' methods. The '__add__' method is defined to subtract the value of 'other' from 'self', and '__sub__' adds the values. When 'foo + bar' is evaluated, it calls '__add__' with 'foo' as 'self' and 'bar' as 'other', resulting in '2 - 3', which is '-1'. Similarly, 'bar - foo' calls '__sub__', resulting in '3 + 2', which is '5'. These operations return new 'Number' objects. The comparison 'foo + bar == bar - foo' then calls '__eq__', which multiplies the values of these new 'Number' objects: '-1 * 5'. Therefore, the output is '-5'.",
      "correctAnswer": "-5",
      "incorrectAnswers": ["True", "False", "1", "-1", "ValueError"]
    },
    {
      "difficulty": "expert",
      "question": "What is the time complexity of the 'foo' function in Big O notation based on the variable 'n'?",
      "codeSnippet": "def foo(n):\n    result = 0\n    for i in range(n):\n        for j in range(i, n*n):\n            result += i * j\n    return result",
      "explanation": "The 'foo' function consists of two nested loops. The outer loop runs 'n' times. The inner loop's range depends on the current value of 'i' from the outer loop, running from 'i' to 'n*n'. As 'i' increases, the number of iterations in the inner loop decreases. However, the worst-case scenario for the inner loop is when 'i' is 0, which makes it run 'n*n' times. Therefore, in the worst case, the total number of iterations is approximately 'n * (n*n)', leading to a time complexity of O(n^3). This accounts for the decreasing iterations in the inner loop as 'i' increases, but since Big O notation considers upper bounds, it simplifies to O(n^3).",
      "correctAnswer": "O(n^3)",
      "incorrectAnswers": ["O(n^2)", "O(n)", "O(n*log(n))", "O(n^4)", "O(2^n)"]
    },
    {
      "difficulty": "expert",
      "question": "What is the time complexity of the 'foo' function in Big O notation based on the variable 'n'?",
      "codeSnippet": "def foo(n):\n    result = 0\n    for i in range(n):\n        for j in range(i, n//2):\n            result += i * j\n    return result",
      "explanation": "The 'foo' function consists of two nested loops. The outer loop runs 'n' times. The inner loop's range varies based on the current value of 'i' from the outer loop, running from 'i' to 'n//2'. The use of integer division (//) for the inner loop's upper bound means it runs up to half of 'n' times, decreasing as 'i' increases. The maximum number of iterations for the inner loop is 'n//2', and it decreases with each increment of 'i'. Therefore, in the worst-case scenario, the total number of iterations is approximately 'n * (n//2)', leading to a time complexity of O(n^2). This accounts for the decreasing number of iterations in the inner loop as 'i' increases, but since Big O notation considers upper bounds, the complexity is simplified to O(n^2).",
      "correctAnswer": "O(n^2)",
      "incorrectAnswers": [
        "O(n^3)",
        "O(n)",
        "O(n*log(n))",
        "O(log(n))",
        "O(2^n)"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of the following Python code?",
      "codeSnippet": "def foo(x):\n    def y(z): return z - 2\n\n    def wrapper(x):\n        y(5)\n\n    return wrapper\n\n\n@foo\ndef bar(x):\n    print(x ** x)\n\n\nbar(2)",
      "explanation": "In this code, the 'foo' function is used as a decorator for the 'bar' function. The 'foo' function defines a nested function 'wrapper' and returns it. When 'bar' is called with an argument (e.g., 'bar(2)'), it's actually calling 'wrapper' instead of 'bar' itself, due to the decoration. The 'wrapper' function inside 'foo' does not call the original 'bar' function or print anything; it merely calls the nested function 'y' with the argument 5 and then exits. Since 'wrapper' does not include a 'print' statement or call the original 'bar' function, nothing is printed when 'bar(2)' is executed.",
      "correctAnswer": "Nothing is printed",
      "incorrectAnswers": ["4", "TypeError", "3", "2", "SyntaxError"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following code?",
      "codeSnippet": "class MyClass:\n    def __init__(self, value):\n        self.__value = value\n\n    @property\n    def value(self):\n        return self.__value\n\n    @value.setter\n    def value(self, value):\n        self.__value = value\n\nobj = MyClass(5)\nobj.value = 10\nprint(obj._MyClass__value)",
      "explanation": "This code demonstrates Python's name mangling feature. The '__value' attribute in the 'MyClass' class is mangled to '_MyClass__value'. The property and setter for 'value' modify and access this mangled attribute. When 'obj.value = 10' is executed, the setter method sets '_MyClass__value' to 10. Therefore, 'print(obj._MyClass__value)' prints 10.",
      "correctAnswer": "10",
      "incorrectAnswers": ["5", "None", "AttributeError", "0", "ValueError"]
    },
    {
      "difficulty": "expert",
      "question": "What happens when the following code is executed?",
      "codeSnippet": "def generator_func():\n    yield 1\n    return 'done'\n\ntry:\n    gen = generator_func()\n    next(gen)\n    next(gen)\nexcept StopIteration as e:\n    print(e.value)",
      "explanation": "The 'generator_func' yields 1 and then returns 'done'. The first call to 'next(gen)' retrieves 1. The second call raises a 'StopIteration' exception, as the generator has no more values to yield. The exception's 'value' attribute contains the value specified by the 'return' statement in the generator, which is 'done'. Therefore, 'print(e.value)' prints 'done'.",
      "correctAnswer": "done",
      "incorrectAnswers": [
        "1",
        "None",
        "StopIteration",
        "GeneratorExit",
        "TypeError"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What is the time complexity of the following function, in Big O notation?",
      "codeSnippet": "def check_duplicates(lst):\n    seen = set()\n    for item in lst:\n        if item in seen:\n            return True\n        seen.add(item)\n    return False",
      "explanation": "The function 'check_duplicates' checks for duplicates in a list. The for loop iterates over each element in the list once, resulting in O(n) time complexity. The 'in' operation for a set is O(1), and so is 'add'. Therefore, the overall time complexity of this function is O(n), where n is the number of elements in the list.",
      "correctAnswer": "O(n)",
      "incorrectAnswers": ["O(n^2)", "O(log n)", "O(n log n)", "O(1)", "O(n^3)"]
    },
    {
      "difficulty": "expert",
      "question": "What does the following code illustrate?",
      "codeSnippet": "import functools\n\n@functools.lru_cache(maxsize=None)\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\nprint(fib(10))",
      "explanation": "This code implements a memoized version of the Fibonacci sequence using the 'lru_cache' decorator from the 'functools' module. The decorator caches the results of the 'fib' function calls, significantly improving its efficiency by avoiding redundant calculations. The 'fib(10)' call calculates the 10th Fibonacci number efficiently using this cache. This is a demonstration of dynamic programming through memoization.",
      "correctAnswer": "Dynamic programming through memoization",
      "incorrectAnswers": [
        "Recursive function without optimization",
        "Infinite recursion",
        "Syntax Error",
        "Iterative approach to Fibonacci sequence",
        "Function overloading"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following code snippet?",
      "codeSnippet": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        dct['cls_attr'] = 'value'\n        return super().__new__(cls, name, bases, dct)\n\nclass MyClass(metaclass=Meta):\n    pass\n\nprint(MyClass.cls_attr)",
      "explanation": "The code snippet defines a custom metaclass 'Meta' that adds a class attribute 'cls_attr' with the value 'value' to any class that uses it as its metaclass. 'MyClass' uses 'Meta' as its metaclass, so it has the 'cls_attr' attribute. The print statement outputs the value of 'MyClass.cls_attr', which is 'value'.",
      "correctAnswer": "value",
      "incorrectAnswers": [
        "None",
        "Meta",
        "AttributeError",
        "{'cls_attr': 'value'}",
        "SyntaxError"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "import functools\n\n@functools.total_ordering\nclass MyClass:\n    def __init__(self, value):\n        self.value = value\n    def __eq__(self, other):\n        return self.value == other.value\n    def __lt__(self, other):\n        return self.value < other.value\n\nobj1 = MyClass(5)\nobj2 = MyClass(10)\nprint(obj1 > obj2)",
      "explanation": "The 'functools.total_ordering' decorator is used to generate missing comparison methods. Since '__lt__' and '__eq__' are defined, 'total_ordering' will provide the rest. Here, 'obj1 > obj2' will call the generated '__gt__' method, which returns False since 5 is not greater than 10.",
      "correctAnswer": "False",
      "incorrectAnswers": ["True", "TypeError", "5", "10", "None"]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of the following code snippet?",
      "codeSnippet": "class Meta(type):\n    def __init__(cls, name, bases, dct):\n        super().__init__(name, bases, dct)\n        cls.class_attr = 'Meta Initialized'\nclass MyClass(metaclass=Meta):\n    pass\nprint(MyClass.class_attr)",
      "explanation": "The custom metaclass 'Meta' adds a class attribute 'class_attr' to MyClass. The '__init__' method of 'Meta' is called when 'MyClass' is created, setting 'class_attr' to 'Meta Initialized'.",
      "correctAnswer": "Meta Initialized",
      "incorrectAnswers": [
        "TypeError",
        "AttributeError",
        "None",
        "Meta",
        "'class_attr' not found"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What concept does this code display?",
      "codeSnippet": "class SingletonMeta(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super().__call__(*args, **kwargs)\n        return cls._instances[cls]\n\nclass Singleton(metaclass=SingletonMeta):\n    pass",
      "explanation": "This code snippet demonstrates the Singleton design pattern using a metaclass in Python. A metaclass 'SingletonMeta' controls the instance creation process of the 'Singleton' class. Whenever a new instance of 'Singleton' is created, 'SingletonMeta.__call__' checks if an instance already exists. If not, it creates and stores one; otherwise, it returns the existing instance. This ensures that only one instance of 'Singleton' can exist at any time.",
      "correctAnswer": "Singleton Design Pattern",
      "incorrectAnswers": [
        "Factory Design Pattern",
        "Decorator Design Pattern",
        "Prototype Design Pattern",
        "Command Design Pattern",
        "Observer Design Pattern"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "class List:\n    def __init__(self, *args):\n        self.container = args\n        self.current = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.current >= len(self.container) - 1:\n            raise StopIteration\n\n        self.current += 2\n        return self.container[self.current]\n\nfoo = List(1, 2, 3, 4, 5, 6, 7)\nbar = 0\n\nfor i in foo:\n    bar += i\n\nprint(bar)",
      "explanation": "This code defines a custom iterator class 'List'. The '__next__' method is designed to skip every other element in 'self.container', starting from index 0. However, the check in '__next__' ('self.current >= len(self.container) - 1') means that the iteration stops prematurely, skipping the last element if the length of 'self.container' is odd. For 'foo = List(1, 2, 3, 4, 5, 6, 7)', the loop iterates over indices 2 (value 3), 4 (value 5), and 6 (value 7), summing up to 15. The output of this code is 15.",
      "correctAnswer": "15",
      "incorrectAnswers": ["28", "10", "21", "7", "SyntaxError"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "class List:\n    def __init__(self, *args):\n        self.container = args\n        self.current = 0\n\n    def __iter__(self):\n        for i in self.container:\n            if i >= len(self.container):\n                raise StopIteration\n            else:\n                tmp = self.current\n                self.current += 1\n                yield self.container[tmp]\n\nfoo = List(1, 2, 3, 4, 5, 6, 7)\nbar = 0\n\nfor i in foo:\n    bar += i\n\nprint(bar)",
      "explanation": "This code snippet attempts to define a custom iterator within the 'List' class using a generator in the '__iter__' method. However, the 'StopIteration' exception is raised manually within the generator, which leads to a 'RuntimeError' in Python 3.7 and later versions. Python's generator functions should not raise 'StopIteration' to signal the end of iteration; instead, they should return normally. This is a subtle but important aspect of Python's iterator protocol.",
      "correctAnswer": "RuntimeError",
      "incorrectAnswers": ["28", "21", "15", "10", "TypeError"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code snippet?",
      "codeSnippet": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        x = 5\n        for key, value in dct.items():\n            if callable(value):\n                def wrapper(*args, _func=value, **kwargs):\n                    return _func(*args, **kwargs) + x\n                dct[key] = wrapper\n        return super().__new__(cls, name, bases, dct)\n\n\nclass A(metaclass=Meta):\n    y = 3\n\n    def foo(self):\n        return self.y\n\n    @classmethod\n    def bar(cls):\n        return 7\n\n    @staticmethod\n    def baz():\n        return 11\n\n\na = A()\nprint(a.foo() + A.bar() - A.baz())",
      "explanation": "This code defines a metaclass 'Meta' that modifies any callable (method) in the class by wrapping it in another function 'wrapper'. This 'wrapper' function adds 5 to the result of the original function. In class 'A', 'foo', 'bar', and 'baz' are modified by 'Meta'. The 'foo' method returns 'self.y' (3) plus 5, resulting in 8. The 'bar' class method returns 7 plus 5, resulting in 12. The 'baz' static method returns 11 plus 5, resulting in 16. The final print statement calculates 8 (from foo) + 12 (from bar) - 16 (from baz), resulting in -1.",
      "correctAnswer": "-1",
      "incorrectAnswers": ["-139", "17", "23", "2899", "TypeError"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of this code snippet using the fractions library?",
      "codeSnippet": "from fractions import Fraction\n\nf1 = Fraction(4, 6)\nf2 = Fraction(10, -15)\nresult = f1 == f2\nprint(result)",
      "explanation": "Both fractions, 4/6 and 10/-15, are reduced to their simplest forms by the 'Fraction' class, resulting in 2/3 and -2/3, respectively. Since these fractions are not equal, the output of the comparison is False.",
      "correctAnswer": "False",
      "incorrectAnswers": ["True", "1", "-2/3", "2/3", "1 2/3"]
    },
    {
      "difficulty": "expert",
      "question": "What happens when this Python code using pickle is executed?",
      "codeSnippet": "import pickle\n\nclass MyClass:\n    def __init__(self, value):\n        self.value = value\n\nobj = MyClass(10)\npickled_obj = pickle.dumps(obj)\nunpickled_obj = pickle.loads(pickled_obj)\nprint(unpickled_obj.value)",
      "explanation": "The code serializes an instance of 'MyClass' using 'pickle.dumps' and then deserializes it back using 'pickle.loads'. The 'value' attribute of the deserialized object ('unpickled_obj') remains intact, so the output is 10.",
      "correctAnswer": "10",
      "incorrectAnswers": [
        "None",
        "Error",
        "'MyClass' object has no attribute 'value'",
        "0",
        "'obj'"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of this code involving conditional pickling?",
      "codeSnippet": "import pickle\n\na = {'x': 10, 'y': 20}\nb = pickle.dumps(a) if 'x' in a else pickle.dumps(None)\nresult = pickle.loads(b)\nprint(result)",
      "explanation": "The code checks if the key 'x' is in dictionary 'a'. Since 'x' is indeed a key in 'a', the dictionary is pickled. The unpickled result is the original dictionary {'x': 10, 'y': 20}.",
      "correctAnswer": "{'x': 10, 'y': 20}",
      "incorrectAnswers": ["{'y': 20}", "None", "'x'", "{'x': 10}", "Error"]
    },
    {
      "difficulty": "expert",
      "question": "What does this pickle code do?",
      "codeSnippet": "import pickle, io\n\nclass MyClass:\n    pass\n\nbuffer = io.BytesIO()\npickle.dump(MyClass, buffer)\nbuffer.seek(0)\ndata = buffer.getvalue()\nobj = pickle.loads(data)\nprint(obj.__name__)",
      "explanation": "The code serializes the class 'MyClass' itself, not an instance of it, to a BytesIO buffer. When deserialized, it retrieves the class back, and the '__name__' attribute of the class is 'MyClass'.",
      "correctAnswer": "MyClass",
      "incorrectAnswers": [
        "'__main__.MyClass'",
        "TypeError",
        "None",
        "'buffer'",
        "'data'"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What output does this complex pickle operation produce?",
      "codeSnippet": "import pickle\n\nclass MyClass:\n    def __init__(self, num):\n        self.num = num\n\n    def __reduce__(self):\n        return (self.__class__, (self.num + 10,))\n\nobj = MyClass(5)\npickled_obj = pickle.dumps(obj)\nunpickled_obj = pickle.loads(pickled_obj)\nprint(unpickled_obj.num)",
      "explanation": "The '__reduce__' method in 'MyClass' modifies the pickling process. When an instance of 'MyClass' is pickled, '__reduce__' returns a tuple with the class and a modified constructor argument (num + 10). Thus, when unpickled, 'num' is 15, not 5.",
      "correctAnswer": "15",
      "incorrectAnswers": ["5", "10", "25", "TypeError", "'num'"]
    },
    {
      "difficulty": "expert",
      "question": "What will be the output of this code involving the io module?",
      "codeSnippet": "import io\n\nbuffer = io.BytesIO()\nbuffer.write(b'12345')\nbuffer.getvalue()[1:4] = b'abc'\nprint(buffer.getvalue())",
      "explanation": "This code tries to mutate a slice of the byte array returned by 'getvalue()', which is not allowed in Python. Bytearrays are immutable, so attempting to modify it will result in a TypeError.",
      "correctAnswer": "TypeError",
      "incorrectAnswers": [
        "b'1abc5'",
        "b'12345'",
        "b'abc45'",
        "ValueError",
        "b'ab12345'"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What is the result of executing this io module code?",
      "codeSnippet": "import io\n\nclass CountingStream(io.StringIO):\n    def __init__(self):\n        super().__init__()\n        self.write_count = 0\n\n    def write(self, s):\n        self.write_count += 1\n        return super().write(s)\n\nstream = CountingStream()\nstream.write('Hello')\nstream.write('World')\nprint(stream.write_count)",
      "explanation": "The 'CountingStream' class, a subclass of 'io.StringIO', overrides the 'write' method to increment 'write_count' each time it's called. Two writes ('Hello' and 'World') result in 'write_count' being 2.",
      "correctAnswer": "2",
      "incorrectAnswers": ["1", "0", "'HelloWorld'", "10", "11"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of this Python code using difflib?",
      "codeSnippet": "import difflib\n\ns1 = 'apple pie'\ns2 = 'apple pi'\nmatcher = difflib.SequenceMatcher(None, s1, s2)\nprint(matcher.ratio())",
      "explanation": "The 'SequenceMatcher' class from 'difflib' compares the similarity of two sequences. In this case, it compares 'apple pie' and 'apple pi'. The ratio method returns a float representing the similarity, which is high in this case due to the minor difference.",
      "correctAnswer": "0.9473684210526315",
      "incorrectAnswers": [
        "apple",
        "pie",
        "apple pi",
        "0.8421052631578947",
        "TypeError"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What does this Python code involving zoneinfo output?",
      "codeSnippet": "from zoneinfo import ZoneInfo\nfrom datetime import datetime\n\ndt = datetime(2021, 1, 1, tzinfo=ZoneInfo('Europe/London'))\nprint(dt.tzname())",
      "explanation": "This code creates a datetime object representing January 1, 2021, in the 'Europe/London' time zone. The 'tzname' method returns the name of the time zone associated with the datetime object, which is 'GMT' during the non-Daylight Saving Time period.",
      "correctAnswer": "GMT",
      "incorrectAnswers": ["UTC", "BST", "Europe/London", "EDT", "PST"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of this code using bisect?",
      "codeSnippet": "import bisect\n\nlst = [10, 20, 30, 40, 50]\nbisect.insort(lst, 35)\nprint(lst[-2])",
      "explanation": "The 'bisect.insort' function inserts an element into a list while maintaining the list's order. The number 35 is inserted between 30 and 40. The second to last element in the list, which is now [10, 20, 30, 35, 40, 50], is 40.",
      "correctAnswer": "40",
      "incorrectAnswers": ["35", "30", "50", "20", "10"]
    },
    {
      "difficulty": "expert",
      "question": "What does this Python code using reprlib output?",
      "codeSnippet": "import reprlib\n\nlarge_list = list(range(100))\nformatted = reprlib.repr(large_list)\nprint(formatted)",
      "explanation": "The 'reprlib' module is used for producing shortened string representations of large or deeply nested objects. In this case, it provides a shortened representation of a large list containing 100 integers.",
      "correctAnswer": "[0, 1, 2, 3, 4, 5, ...]",
      "incorrectAnswers": [
        "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "list(range(100))",
        "Nothing is printed",
        "[...]",
        "TypeError"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of this Python code using difflib's get_close_matches?",
      "codeSnippet": "import difflib\n\nwords = ['cat', 'caterpillar', 'whale', 'car', 'dog']\nresult = difflib.get_close_matches('ca', words, n=2, cutoff=0.5)\nprint(result)",
      "explanation": "The 'get_close_matches' function finds the best 'n' matches for a given word that have a similarity score above 'cutoff'. Here, it finds the two closest matches to 'ca' in the list, with a similarity cutoff of 0.5. The closest matches are 'cat' and 'car'.",
      "correctAnswer": "['cat', 'car']",
      "incorrectAnswers": [
        "['cat', 'caterpillar']",
        "['caterpillar', 'whale']",
        "['cat']",
        "['car', 'dog']",
        "ValueError"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code involving the 'textwrap' module?",
      "codeSnippet": "import textwrap\ns = 'Python programming is fun.'\nresult = textwrap.shorten(s, width=12, placeholder='...')\nprint(result)",
      "explanation": "The 'textwrap.shorten' function shortens the string 's' to a width of 12 characters, including the placeholder '...'. It attempts to break the string at a space near the end, resulting in 'Python...' for this input.",
      "correctAnswer": "Python...",
      "incorrectAnswers": [
        "Python ...",
        "[...]",
        "Python programming is fun...",
        "TypeError",
        "ValueError"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What will the following Python code output, using the 'statistics' module?",
      "codeSnippet": "import statistics\nnums = [1, 2, 2, 3, 4, 4, 5]\nresult = statistics.multimode(nums)\nprint(result)",
      "explanation": "The 'statistics.multimode' function returns the most frequently occurring values in 'nums'. In this case, both 2 and 4 appear twice, making them the most common elements. Therefore, the output is a list containing both [2, 4].",
      "correctAnswer": "[2, 4]",
      "incorrectAnswers": [
        "[2]",
        "[4]",
        "[1, 2, 3, 4, 5]",
        "TypeError",
        "ValueError"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What does the following Python code using the 'functools' module print?",
      "codeSnippet": "import functools\nnums = [1, 2, 3, 4, 5]\nresult = functools.reduce(lambda x, y: x * y, nums)\nprint(result)",
      "explanation": "The 'functools.reduce' function applies the lambda function (which multiplies two numbers) cumulatively to the items of 'nums'. It computes the product of all elements in the list, which is 1 * 2 * 3 * 4 * 5, resulting in 120.",
      "correctAnswer": "120",
      "incorrectAnswers": ["15", "5", "10", "TypeError", "None"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code using the 'weakref' module?",
      "codeSnippet": "import weakref\nclass Foo:\n    pass\n\nobj = Foo()\nref = weakref.ref(obj)\nprint(ref() is obj)",
      "explanation": "The 'weakref.ref' function creates a weak reference to the object 'obj'. The expression 'ref() is obj' checks if the object referred to by the weak reference 'ref' is the same as 'obj'. It evaluates to True since 'ref()' still refers to 'obj' at this point.",
      "correctAnswer": "True",
      "incorrectAnswers": [
        "False",
        "None",
        "WeakReferenceError",
        "TypeError",
        "MemoryError"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What will the following Python code output, using the 'stringprep' module?",
      "codeSnippet": "import stringprep\ns = 'Python3.8'\nresult = all(stringprep.in_table_c21_c22(c) for c in s)\nprint(result)",
      "explanation": "The 'stringprep.in_table_c21_c22' function checks if characters are in table C.2.1 or C.2.2 (non-ASCII space characters). Since 'Python3.8' has no such characters, the output of the code is False.",
      "correctAnswer": "False",
      "incorrectAnswers": [
        "True",
        "TypeError",
        "None",
        "ValueError",
        "IndexError"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code using the 'shelve' module?",
      "codeSnippet": "import shelve\nwith shelve.open('myshelve.db') as db:\n    db['foo'] = 'bar'\n    print('foo' in db)",
      "explanation": "The 'shelve.open' function opens a persistent dictionary-like object. The key 'foo' with value 'bar' is stored in the database. The expression 'foo' in db' checks if 'foo' is a key in the database, which evaluates to True.",
      "correctAnswer": "True",
      "incorrectAnswers": [
        "It depends on if the file 'myshelve.db' exists",
        "'bar'",
        "TypeError",
        "None",
        "KeyError"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What does the following Python code using 'functools' print?",
      "codeSnippet": "import functools\n@functools.lru_cache(maxsize=2)\ndef foo(n):\n    return n * 2\n\nfoo(1)\nfoo(2)\nfoo(3)\nresult = foo.cache_info()\nprint(result.hits, result.misses)",
      "explanation": "The 'foo' function is decorated with 'functools.lru_cache' with a maxsize of 2. This caches the most recent two calls. The function is called three times with different arguments. The 'cache_info' method returns a named tuple containing the number of cache hits and misses. Since no argument is repeated, there are 0 hits and 3 misses.",
      "correctAnswer": "0 3",
      "incorrectAnswers": ["1 2", "2 1", "3 0", "TypeError", "None"]
    },
    {
      "difficulty": "expert",
      "question": "What is the output of the following Python code using the 'functools' module?",
      "codeSnippet": "import functools\ndef foo(x, y):\n    return x + y\n\nbar = functools.partial(foo, y=3)\nresult = bar(2)\nprint(result)",
      "explanation": "The 'functools.partial' function creates a new version of 'foo' with 'y' pre-filled as 3. Calling 'bar(2)' is equivalent to calling 'foo(2, 3)', which returns 5.",
      "correctAnswer": "5",
      "incorrectAnswers": ["2", "3", "TypeError", "None", "8"]
    },
    {
      "difficulty": "expert",
      "question": "What does the following Python code using 'graphlib' print?",
      "codeSnippet": "from graphlib import TopologicalSorter\nts = TopologicalSorter()\nts.add('a', 'b')\nts.add('b', 'c')\ntry:\n    ts.prepare()\n    result = 'No Cycle Detected'\nexcept graphlib.CycleError:\n    result = 'Cycle Detected'\nprint(result)",
      "explanation": "The 'TopologicalSorter' is used to find a topological ordering of the nodes. Since there is no cycle in the graph ('a' -> 'b' -> 'c'), the 'prepare' method does not raise a 'CycleError', resulting in 'No Cycle Detected' being printed.",
      "correctAnswer": "No Cycle Detected",
      "incorrectAnswers": [
        "Cycle Detected",
        "TypeError",
        "RuntimeError",
        "ValueError",
        "GraphError"
      ]
    },
    {
      "difficulty": "expert",
      "question": "What does the following Python code using 'graphlib' print?",
      "codeSnippet": "from graphlib import CycleError, TopologicalSorter\nts = TopologicalSorter()\nts.add('eat', 'sleep')\nts.add('sleep', 'eat')\ntry:\n    list(ts.static_order())\n    result = 'No Cycle Detected'\nexcept CycleError:\n    result = 'Cycle Detected'\nprint(result)",
      "explanation": "The added edges 'eat' -> 'sleep' and 'sleep' -> 'eat' create a cycle. When trying to find a topological order using 'static_order', a 'CycleError' is raised due to this cycle. Thus, 'Cycle Detected' is printed.",
      "correctAnswer": "Cycle Detected",
      "incorrectAnswers": [
        "No Cycle Detected",
        "TypeError",
        "RuntimeError",
        "ValueError",
        "GraphError"
      ]
    }
  ]
}
